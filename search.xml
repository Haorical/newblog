<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CUMT信息安全专业算法设计与分析实验考试2022</title>
      <link href="/posts/45132/"/>
      <url>/posts/45132/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>一共5道题，都是原题，2道英文题是算法课的作业题，以为不会考，结果考了，勉强做了4个，最后一个忘了转移方程了，想写个暴力的解法，结果没写完。本来以为会出个回溯题的，但是一个也没出，白练了一堆。整体就是dp+贪心+dp+模拟+hash，比较一般，对题目有点失望。</p></blockquote><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><blockquote><p>两个签到题之一</p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个字符串A的子串被定义成从A中顺次选出若干个字符构成的串。如A&#x3D;“cdaad” ,顺次选1，3，5个字符就构成子串” cad” ,现给定两个字符串，求它们的最长共公子串。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一行两个字符串用空格分开。两个串的长度均小于2000 。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>最长子串的长度。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>abccd aecd</code></pre><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code>3</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2010</span>;</span><br><span class="line"><span class="type">char</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;a+<span class="number">1</span>&gt;&gt;b+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> l1=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> l2=<span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l1;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=l2;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j]) dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[l1][l2];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跳跃游戏2"><a href="#跳跃游戏2" class="headerlink" title="跳跃游戏2"></a>跳跃游戏2</h2><blockquote><p>另一个签到题，简单的贪心，这两题做了就能及格了</p></blockquote><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个非负整数数组，假定你的初始位置为数组第一个下标。数组中的每个元素代表你在那个位置能够跳跃的最大长度。你的目标是到达最后一个下标，并且使用最少的跳跃次数。例如：A &#x3D; [2,3,1,1,4]，到达最后一个下标的最少跳跃次数为 2。（先跳跃11步，从下标0到1，然后跳跃3步，到达最后一个下标。一共两次）</p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>第一行输入一个正整数n(1≤n≤100)，接下来的一行，输入n个整数，表示数组A。</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>最后输出最少的跳跃次数。</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>53 1 1 1 1</code></pre><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code>2</code></pre><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>,m=<span class="number">0</span>,end=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m&gt;=i)&#123;</span><br><span class="line">            m=<span class="built_in">max</span>(m,i+a[i]);</span><br><span class="line">            <span class="keyword">if</span>(i==end)&#123;</span><br><span class="line">                end=m;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rock-Paper-Scissors-Tournament"><a href="#Rock-Paper-Scissors-Tournament" class="headerlink" title="Rock-Paper-Scissors Tournament"></a>Rock-Paper-Scissors Tournament</h2><blockquote><p>其中一个英文题，还行，只是个模拟</p></blockquote><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>Rock-Paper-Scissors is game for two players, A and B, who each choose, independently of the other, one of rock, paper, or scissors. A player chosing paper wins over a player chosing rock; a player chosing scissors wins over a player chosing paper; a player chosing rock wins over a player chosing scissors. A player chosing the same thing as the other player neither wins nor loses.<br>A tournament has been organized in which each of n players plays k rock-scissors-paper games with each of the other players - k<em>n</em>(n-1)&#x2F;2 games in total. Your job is to compute the win average for each player, defined as w &#x2F; (w + l) where w is the number of games won, and l is the number of games lost, by the player. </p><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>Input consists of several test cases. The first line of input for each case contains 1 &lt;&#x3D; n &lt;&#x3D; 100 1 &lt;&#x3D; k &lt;&#x3D; 100 as defined above. For each game, a line follows containing p1, m1, p2, m2. 1 &lt;&#x3D; p1 &lt;&#x3D; n and 1 &lt;&#x3D; p2 &lt;&#x3D; n are distinct integers identifying two players; m1 and m2 are their respective moves (“rock”, “scissors”, or “paper”). A line containing 0 follows the last test case.</p><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>Output one line each for player 1, player 2, and so on, through player n, giving the player’s win average rounded to three decimal places. If the win average is undefined, output “-“. Output an empty line between cases.</p><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>2 41 rock 2 paper1 scissors 2 paper1 rock 2 rock2 rock 1 scissors2 11 rock 2 paper0</code></pre><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code>0.3330.6670.0001.000</code></pre><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> win[N],loss[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        cin&gt;&gt;k;</span><br><span class="line">        <span class="built_in">memset</span>(win,<span class="number">0</span>,<span class="built_in">sizeof</span>(win));</span><br><span class="line">        <span class="built_in">memset</span>(loss,<span class="number">0</span>,<span class="built_in">sizeof</span>(loss));</span><br><span class="line">        <span class="type">int</span> t1,t2;</span><br><span class="line">        string s1,s2;</span><br><span class="line">        <span class="type">int</span> m=k*n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            cin&gt;&gt;t1&gt;&gt;s1&gt;&gt;t2&gt;&gt;s2;</span><br><span class="line">            <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">&#x27;r&#x27;</span>&amp;&amp;s2[<span class="number">0</span>]==<span class="string">&#x27;s&#x27;</span>||s1[<span class="number">0</span>]==<span class="string">&#x27;s&#x27;</span>&amp;&amp;s2[<span class="number">0</span>]==<span class="string">&#x27;p&#x27;</span>||s1[<span class="number">0</span>]==<span class="string">&#x27;p&#x27;</span>&amp;&amp;s2[<span class="number">0</span>]==<span class="string">&#x27;r&#x27;</span>)&#123;</span><br><span class="line">                win[t1]++;</span><br><span class="line">                loss[t2]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">&#x27;s&#x27;</span>&amp;&amp;s2[<span class="number">0</span>]==<span class="string">&#x27;r&#x27;</span>||s1[<span class="number">0</span>]==<span class="string">&#x27;p&#x27;</span>&amp;&amp;s2[<span class="number">0</span>]==<span class="string">&#x27;s&#x27;</span>||s1[<span class="number">0</span>]==<span class="string">&#x27;r&#x27;</span>&amp;&amp;s2[<span class="number">0</span>]==<span class="string">&#x27;p&#x27;</span>)&#123;</span><br><span class="line">                win[t2]++;</span><br><span class="line">                loss[t1]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(win[i]==<span class="number">0</span>&amp;&amp;loss[i]==<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;-\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">double</span> t=<span class="number">1.0</span>*win[i]/<span class="built_in">double</span>(win[i]+loss[i]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%.3f\n&quot;</span>,t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Brackets-Sequence"><a href="#Brackets-Sequence" class="headerlink" title="Brackets Sequence"></a>Brackets Sequence</h2><blockquote><p>没做出来的一个题，整个年级就一个人做出来了（汗），其实就是个区间dp，就是打印比较繁琐</p></blockquote><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>Let us define a regular brackets sequence in the following way: </p><ol><li>Empty sequence is a regular sequence. </li><li>If S is a regular sequence, then (S) and [S] are both regular sequences. </li><li>If A and B are regular sequences, then AB is a regular sequence.</li></ol><p>For example, all of the following sequences of characters are regular brackets sequences: </p><p>(), [], (()), ([]), ()[], ()[()] </p><p>And all of the following character sequences are not: </p><p>(, [, ), )(, ([)], ([(] </p><p>Some sequence of characters ‘(‘, ‘)’, ‘[‘, and ‘]’ is given. You are to find the shortest possible regular brackets sequence, that contains the given character sequence as a subsequence. Here, a string a1 a2 … an is called a subsequence of the string b1 b2 … bm, if there exist such indices 1 &#x3D; i1 &lt; i2 &lt; … &lt; in &#x3D; m, that aj &#x3D; bij for all 1 &lt;&#x3D; j&lt; &#x3D; n.</p><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>The input file contains at most 100 brackets (characters ‘(‘, ‘)’, ‘[‘ and ‘]’) that are situated on a single line without any other characters among them.</p><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>Write to the output file a single line that contains some regular brackets sequence that has the minimal possible length and contains the given sequence as a subsequence.</p><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>([(]</code></pre><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code>([(]</code></pre><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dp[i][j] 从i到j需要添加括号的个数</span></span><br><span class="line"><span class="comment">// dp[i][j]=dp[i+1][j-1] match(i,j)</span></span><br><span class="line"><span class="comment">// dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]) </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">256</span>;</span><br><span class="line"><span class="type">char</span> br[MAXN];</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXN], pos[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_br</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; j)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (br[i] == <span class="string">&#x27;(&#x27;</span> || br[j] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;()&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pos[i][j] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, br[i]);</span><br><span class="line">        <span class="built_in">print_br</span>(i + <span class="number">1</span>, j - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, br[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">print_br</span>(i, pos[i][j]);</span><br><span class="line">        <span class="built_in">print_br</span>(pos[i][j] + <span class="number">1</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">match</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (br[i] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; br[j] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (br[i] == <span class="string">&#x27;[&#x27;</span> &amp;&amp; br[j] == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k, mid, t;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">gets</span>(br) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">        len = <span class="built_in">strlen</span>(br);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; len; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i + k &lt; len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                j = i + k;</span><br><span class="line">                dp[i][j] = <span class="number">0x7fffffff</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">match</span>(i, j))</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    pos[i][j] = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (k = i; k &lt; j; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i][j] &gt; (t = dp[i][k] + dp[k + <span class="number">1</span>][j]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[i][j] = t;</span><br><span class="line">                        pos[i][j] = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print_br</span>(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sort2"><a href="#sort2" class="headerlink" title="sort2"></a>sort2</h2><blockquote><p>数据比之前大了很多到了1e6，不过数组能正常存，用sort肯定就寄了，写个类似计数排序就可以</p></blockquote><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你n个整数，请按从大到小的顺序输出其中前m大的数。</p><h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>每组测试数据有两行，第一行有两个数n,m(0&lt;n,m&lt;1000000)，第二行包含n个都处于区间[-500000,500000]的整数，整数可能会重复出现。</p><h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>对每组测试数据按从大到小的顺序输出前m大的数。</p><h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>10 51 2 3 4 5 6 7 7 8 9</code></pre><h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code>9 8 7 7 6</code></pre><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,t;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        a[t+<span class="number">500000</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1000000</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans==m) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">while</span>(a[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;i<span class="number">-500000</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            ans++;</span><br><span class="line">            a[i]--;</span><br><span class="line">            <span class="keyword">if</span>(ans==m) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 考试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计实验复习</title>
      <link href="/posts/63805/"/>
      <url>/posts/63805/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="可重复集全排列"><a href="#可重复集全排列" class="headerlink" title="可重复集全排列"></a>可重复集全排列</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    s.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        cout&lt;&lt;s&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>()));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 100000007</span></span><br><span class="line"><span class="function">ll <span class="title">fastpow</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ll tmp=<span class="built_in">fastpow</span>(x,y/<span class="number">2</span>)%MOD;</span><br><span class="line">    ll t=(tmp*tmp)%MOD;</span><br><span class="line">    <span class="keyword">if</span>(y%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> t%MOD;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> t*x%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;x)&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line">            ll t=<span class="built_in">fastpow</span>(i,i)%MOD;</span><br><span class="line">            ans=(ans+t)%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;(ans+<span class="number">1</span>)%MOD&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第k小"><a href="#第k小" class="headerlink" title="第k小"></a>第k小</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> v[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v,v+n);</span><br><span class="line">    cout&lt;&lt;v[k<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部收益率"><a href="#内部收益率" class="headerlink" title="内部收益率"></a>内部收益率</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二分</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">12</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="type">int</span> cf[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=t;i++)&#123;</span><br><span class="line">            cin&gt;&gt;cf[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> l=<span class="number">-1e6</span>,r=<span class="number">1e6</span>,x,npv=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            npv=cf[<span class="number">0</span>];</span><br><span class="line">            x=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line">                npv+=cf[i]/<span class="built_in">pow</span>(x,i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(npv)&lt;=eps) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(npv&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                r=x;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l=x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,x<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 斐波那契</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>,c;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            c=(a+b)%<span class="number">1000000007</span>;</span><br><span class="line">            b=a;</span><br><span class="line">            a=c;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><h3 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h3><blockquote><p>密码学是研究编制密码和破译密码的技术科学。研究密码变化的客观规律，应用于编制密码以保守通信秘密的，称为编码学；应用于破译密码以获取通信情报的，称为破译学，总称密码学。密码是通信双方按约定的法则进行信息特殊变换的一种重要保密手段。依照这些法则，变明文为密文，称为加密变换；变密文为明文，称为脱密变换。密码在早期仅对文字或数码进行加、脱密变换，随着通信技术的发展，对语音、图像、数据等都可实施加、脱密变换。<br>现在要求你用下面给定的方法对数据实现加密。给定长度为n的字符串S（1&lt;&#x3D;n&lt;&#x3D;2000,S中只有大写字母）作为明文，要求构造一个字符串T作为密文，起初T是一个空串，之后反复执行以下任意操作</p><p>1.从S的头部删除一个字符，加入到T的尾部<br>2.从S的尾部删除一个字符，加入到T的尾部</p><p>最后S会变成空串，T会变成一个长度为n的字符串作为密文。当然并非所有的构造方案都是符合条件的，我们要求构造出的密文T的字典序尽可能小，你能找出这个字典序最小的密文吗？</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> p1=<span class="number">0</span>,p2=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> ok=<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> l=p1,r=p2;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[l]&lt;s[r])&#123;</span><br><span class="line">                    ok=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[l]&gt;s[r])&#123;</span><br><span class="line">                    ok=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ok)&#123;</span><br><span class="line">                cout&lt;&lt;s[p1];</span><br><span class="line">                p1++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;s[p2];</span><br><span class="line">                p2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f[j]=max(f[j],f[j-v[i]]+w[i])</span></span><br><span class="line"><span class="comment">// j--</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> v[N],w[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=v[i];j--)&#123;</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f[j]=max(f[j],f[j-v[i]]+w[i])</span></span><br><span class="line"><span class="comment">// j++</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> v[N],w[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=v[i];j&lt;=m;j++)&#123;</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="沙子的质量"><a href="#沙子的质量" class="headerlink" title="沙子的质量"></a>沙子的质量</h3><blockquote><p>设有N堆沙子排成一排，其编号为1，2，3，…，N（N&lt; &#x3D;300）。每堆沙子有一定的数量，可以用一个整数来描述，现在要将N堆沙子合并成为一堆，每次只能合并相邻的两堆，合并的代价为这两堆沙子的数量之和，合并后与这两堆沙子相邻的沙子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆沙子分别为1 3 5 2我们可以先合并1、2堆，代价为4，得到4 5 2又合并1，2堆，代价为9，得到9 2，再合并得到11，总代价为4+9+11&#x3D;24，如果第二步是先合并2，3堆，则代价为7，得到4 7，最后一次合并代价为11，总代价为4+7+11&#x3D;22；问题是：找出一种合理的方法，使总的代价最小。输出最小代价。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 状态转移方程</span></span><br><span class="line"><span class="comment">// dp[i][j]表示[i,j]区间合并最小代价</span></span><br><span class="line"><span class="comment">// dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+s[j]-s[i-1])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N],s[N],dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,t;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123; <span class="comment">// 1开始</span></span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">        s[i]+=s[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">2</span>;len&lt;=n;len++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> j=i+len<span class="number">-1</span>;</span><br><span class="line">            dp[i][j]=<span class="number">0x3fffffff</span>; <span class="comment">//初始化</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=j;k++)&#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[i][k]+dp[k+<span class="number">1</span>][j]+s[j]-s[i<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[<span class="number">1</span>][n];</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dp[i][j] a的前i位和b的前j位最长公共子序列长度</span></span><br><span class="line"><span class="comment">// dp[i][j]=dp[i-1][j-1] a[i]=b[j]</span></span><br><span class="line"><span class="comment">// dp[i][j]=max(dp[i-1][j],dp[i][j-1]) a[i]!=b[j]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2010</span>;</span><br><span class="line"><span class="type">char</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;a+<span class="number">1</span>&gt;&gt;b+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> l1=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> l2=<span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l1;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=l2;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j]) dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[l1][l2];</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三角形的路径权"><a href="#三角形的路径权" class="headerlink" title="三角形的路径权"></a>三角形的路径权</h3><blockquote><p>如输入样例所示出了一个数字三角形。请编一个程序计算从顶至底的某处的一条路径，使该路径所经过的数字的总和最大。每一步可沿左斜线向下或右斜线向下走；1&lt; 三角形行数&lt; 25；三角形中的数字为整数&lt; 1000；</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dp[i][j] 第i行第j列为路径顶点的最大路径权的长度</span></span><br><span class="line"><span class="comment">// dp[i][j]=max(dp[i+1][j],dp[i+1][j+1])+a[i][j];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>])+a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字母排序"><a href="#字母排序" class="headerlink" title="字母排序"></a>字母排序</h3><blockquote><p>XXXX年突然有外星人造访，但大家语言不通，不过科学家们经过研究发现外星人用26个英文字母组成的单词中最长不降子序列的长度来表述数字，且英文字母的排列顺序不同，现给出其排列顺序，再给出外星人说的每个数字（其实是每个英文单词，用空格隔开），翻译出外星人所说的数字（连续输出，最后加回车）。(因为是最长不降子序列，所以数字中没有0，也就是说外星人的数字是大于0的数字)。例如，我们正常的字母排列顺序是abcdefg…….xyz，代表a&lt; b&lt; c&lt; …..&lt; x&lt; y&lt; z abcd efg hhh ihg四个字符串的最长不降子序列的长度分别为4 3 3 1。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最长上升子序列</span></span><br><span class="line"><span class="comment">// dp[i] 以a[i]结尾的最长上升子序列的长度</span></span><br><span class="line"><span class="comment">// dp[i]=max(dp[i],dp[j]+1) dp[i]初始化为1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">300</span>;</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; al;</span><br><span class="line"><span class="comment">// dp[i]=max(dp[j])+1 | 1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> l1=s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l1;i++)&#123;</span><br><span class="line">        al[s[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (cin&gt;&gt;s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">        l1=s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l1;i++)&#123;</span><br><span class="line">            dp[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(al[s[i]]&gt;=al[s[j]])</span><br><span class="line">                dp[i]=<span class="built_in">max</span>(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长子序列"><a href="#最长子序列" class="headerlink" title="最长子序列"></a>最长子序列</h3><blockquote><p>在一个数组中找出和最大的连续几个数。（至少包含一个数）</p><p>例如：</p><p>数组A[] &#x3D; [-2,1,-3,4,-1,2,1,-5,4]，则连续的子序列[4,-1,2,1]有最大的和6.</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dp[i]以a[i]结尾的最大子序列和</span></span><br><span class="line"><span class="comment">// dp[i]=max(a[i],dp[i-1]+a[i])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N],dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">-0x3fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dp[i]=<span class="built_in">max</span>(a[i],dp[i<span class="number">-1</span>]+a[i]);</span><br><span class="line">        u=<span class="built_in">max</span>(u,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;u&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单的密码"><a href="#简单的密码" class="headerlink" title="简单的密码"></a>简单的密码</h3><blockquote><p>密码是按特定法则编成，用以对通信双方的信息进行明密变换的符号。密码是隐蔽了真实内容的符号序列。其实就是把用公开的、标准的信息编码表示的信息通过一种变换手段，将其变为除通信双方以外其他人所不能读懂的信息编码，这种独特的信息编码就是密码。</p><p>现在我们定义一种非常简单的密码，它的长度固定为n（n&lt;&#x3D;30）并且每一位只能由数字0或者数字1组成，但是有一个特殊的要求：一个密码序列中至少要有连续的3个0出现才可以，否则就是无效的。现在给定你密码序列的长度n，你的任务是计算长度为n的序列能产生多少种不同的并且有效的密码？</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递推公式，不像dp</span></span><br><span class="line"><span class="comment">// dp[i]=dp[i-1]*2+(1&lt;&lt;(i-4))-dp[i-4];</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">40</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4</span>;i&lt;=<span class="number">30</span>;i++)&#123;</span><br><span class="line">        dp[i]=<span class="number">2</span>*dp[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;(i<span class="number">-4</span>))-dp[i<span class="number">-4</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        cout&lt;&lt;dp[n]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><h3 id="跳跃游戏2"><a href="#跳跃游戏2" class="headerlink" title="跳跃游戏2"></a>跳跃游戏2</h3><blockquote><p>给定一个非负整数数组，假定你的初始位置为数组第一个下标。数组中的每个元素代表你在那个位置能够跳跃的最大长度。你的目标是到达最后一个下标，并且使用最少的跳跃次数。例如：A &#x3D; [2,3,1,1,4]，到达最后一个下标的最少跳跃次数为 2。（先跳跃11步，从下标0到1，然后跳跃3步，到达最后一个下标。一共两次）</p></blockquote><p>两种方法第一种好理解，第二种时间复杂度低</p><h4 id="倒着遍历"><a href="#倒着遍历" class="headerlink" title="倒着遍历"></a>倒着遍历</h4><p>比较好理解，贪心的选择距离终点最远能跳到终点的位置</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t=n<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+a[i]&gt;=t)&#123;</span><br><span class="line">                cout&lt;&lt;i+a[i]&lt;&lt;endl;</span><br><span class="line">                t=i;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="正着遍历"><a href="#正着遍历" class="headerlink" title="正着遍历"></a>正着遍历</h4><p>难理解，但是O(n)的复杂度</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> m=<span class="number">0</span>; <span class="comment">// 当前能够到达的最大下标位置</span></span><br><span class="line">    <span class="type">int</span> end=<span class="number">0</span>; <span class="comment">// 上次跳跃范围的边界|下次起跳的起点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123; <span class="comment">//注意这里是n-1</span></span><br><span class="line">        <span class="keyword">if</span>(m&gt;=i)&#123;</span><br><span class="line">            m=<span class="built_in">max</span>(m,i+a[i]); <span class="comment">// 维护能跳到的最远范围</span></span><br><span class="line">            <span class="keyword">if</span>(i==end)&#123; <span class="comment">// 到达边界</span></span><br><span class="line">                end=m; <span class="comment">// 更新边界</span></span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h3><blockquote><p>临近开学了，大家都忙着收拾行李准  备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。</p><p>暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4&#x2F;5的作业了。</p><p>I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。</p><p>现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。</p></blockquote><p><strong>贪心策略：</strong> 先做价值高的作业</p><p>&#x2F;&#x2F; 多组测试数据</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> t,v;</span><br><span class="line">    <span class="type">double</span> a;</span><br><span class="line">&#125;nd[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.a&gt;y.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;m&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>&amp;&amp;n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> t1,t2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">            nd[i].t=t1;</span><br><span class="line">            nd[i].v=t2;</span><br><span class="line">            nd[i].a=<span class="number">1.0</span>*t2/t1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nd,nd+m,cmp);</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> sum=<span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nd[i].t+ans&gt;n)&#123;</span><br><span class="line">                sum+=(n-ans)*nd[i].a;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum+=nd[i].v;</span><br><span class="line">                ans+=nd[i].t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间包含问题"><a href="#区间包含问题" class="headerlink" title="区间包含问题"></a>区间包含问题</h3><blockquote><p>已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。</p></blockquote><p><strong>贪心策略：</strong> 优先选择早结束的</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多组测试数据</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> s,e;</span><br><span class="line">&#125;nd[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.e&lt;y.e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,t1,t2,l,r;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;nd[i].s&gt;&gt;nd[i].e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nd,nd+n,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nd[i].e&gt;r) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(nd[i].s&gt;=l)&#123;</span><br><span class="line">                    l=nd[i].e;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三值排序"><a href="#三值排序" class="headerlink" title="三值排序"></a>三值排序</h3><blockquote><p>排序是一种很频繁的计算任务。一个实际的例子是，当我们给某项竞赛的优胜者按金银铜牌排序的时候。在这个任务中可能的值只有三种1，2和3。我们用交换的方法把他排成升序的。</p><p>写一个程序计算出，计算出的一个包括1、2、3三种值的数字序列，排成升序所需的最少交换次数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        b[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> t=b[i]-a[i];</span><br><span class="line">        <span class="keyword">if</span>(t&gt;<span class="number">0</span>) ans1++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t&lt;<span class="number">0</span>) ans2++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(ans1,ans2);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法师康的工人"><a href="#法师康的工人" class="headerlink" title="法师康的工人"></a>法师康的工人</h3><blockquote><p>三个法师康的工人每天早上6点到工厂开始到三条产品生产线上组装桔子手机。第一个工人在200时刻开始（从6点开始计时，以秒作为单位）在生产线上开始生产，一直到1000时刻。第二个工人，在700时刻开始，在1100时刻结束。第三个工人从1500时刻工作到2100时刻。期间最长至少有一个工人在生产线上工作的连续时间为900秒（从200时刻到1100时刻），而最长的无人生产的连续时间（从生产开始到生产结束）为400时刻（1100时刻到1500时刻）。</p><p>你的任务是用一个程序衡量N个工人在N条产品线上的工作时间列表（1≤N≤5000，以秒为单位）。</p><p>·最长的至少有一个工人在工作的时间段</p><p>·最长的无人工作的时间段（从有人工作开始计）</p></blockquote><p><strong>贪心策略：</strong> 优先选择开始时间早的</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按开始时间从小到大排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> s,e;</span><br><span class="line">&#125;nd[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.s&lt;y.s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;nd[i].s&gt;&gt;nd[i].e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nd,nd+n,cmp);</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    l=nd[<span class="number">0</span>].s,r=nd[<span class="number">0</span>].e;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>,MAX=<span class="number">-1</span>,MAX2=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nd[i].s&lt;=r&amp;&amp;nd[i].e&gt;r)&#123;</span><br><span class="line">            r=nd[i].e;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nd[i].s&gt;r)&#123;</span><br><span class="line">            ans=r-l;</span><br><span class="line">            MAX=<span class="built_in">max</span>(MAX,ans);</span><br><span class="line">            l=nd[i].s;</span><br><span class="line">            MAX2=<span class="built_in">max</span>(MAX2,l-r);</span><br><span class="line">            r=nd[i].e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;MAX&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;MAX2;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><h3 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h3><blockquote><p>努比亚和苏丹没有子女，所以他要从一些有集成资格的继承者中挑选一个出来继承王位。他希望这个继承者足够聪明，所以他准备了一个西洋棋盘，上面的每个格子中均有一个 1-99 的数字。他又准备了 8 个皇后棋子。</p><p>8 皇后的规则就是不能有任何棋子同行或者同列或者同斜线，在满足这个规则的同时，王位继承者还需要让 8 个皇后所在的位置的数字的和是最大的。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 八皇后</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> c[N],a[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> maxvalue;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur&gt;<span class="number">8</span>)&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cur;i++)&#123;</span><br><span class="line">            ans+=a[i][c[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        maxvalue=<span class="built_in">max</span>(maxvalue,ans);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> ok=<span class="number">1</span>;</span><br><span class="line">        c[cur]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;cur;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c[cur]==c[j]||<span class="built_in">abs</span>(c[cur]-c[j])==<span class="built_in">abs</span>(cur-j))&#123;</span><br><span class="line">                ok=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ok) <span class="built_in">dfs</span>(cur+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// c[cur]=0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        maxvalue=<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">8</span>;j++)&#123;</span><br><span class="line">                cin&gt;&gt;a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">        cout&lt;&lt;maxvalue&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2n皇后问题"><a href="#2n皇后问题" class="headerlink" title="2n皇后问题"></a>2n皇后问题</h3><blockquote><p>给定一个 n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入 n 个黑皇后和 n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n 小于等于 8。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先放黑的再放白的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="type">int</span> cblack[N],cwhite[N];</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur&gt;n)&#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!a[cur][i]) <span class="keyword">continue</span>; <span class="comment">// 不要放在里面判断，否则cur=1时会跳过判断</span></span><br><span class="line">        cwhite[cur]=i;</span><br><span class="line">        <span class="type">int</span> ok=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;cur;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cwhite[cur]==cwhite[j]||<span class="built_in">abs</span>(cwhite[cur]-cwhite[j])==cur-j||cblack[cur]==i)&#123;</span><br><span class="line">                ok=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ok) <span class="built_in">dfs2</span>(cur+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// cwhite[cur]=0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur&gt;n)&#123;</span><br><span class="line">        <span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!a[cur][i]) <span class="keyword">continue</span>;</span><br><span class="line">        cblack[cur]=i;</span><br><span class="line">        <span class="type">int</span> ok=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;cur;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cblack[cur]==cblack[j]||<span class="built_in">abs</span>(cblack[cur]-cblack[j])==<span class="built_in">abs</span>(cur-j))&#123;</span><br><span class="line">                ok=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ok)&#123;</span><br><span class="line">            <span class="comment">// a[cur][i]=0;</span></span><br><span class="line">            <span class="built_in">dfs1</span>(cur+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;sum;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合运算式"><a href="#组合运算式" class="headerlink" title="组合运算式"></a>组合运算式</h3><blockquote><p>请考虑一个被空格分隔的，由1到N的整数组成的递增数列：1 2 3 …N。现在请在数列中插入表示加的“+”，或者表示减“-”，亦或者表示空白的“ ”(例如1-2 3就等于1-23)，来将每一对数字组合成一个表达式（第一个数字前无空格）。计算该表达式的结果并判断其值是否为0。请你写一个程序找出所有产生和为零的长度为N的数列。</p></blockquote><blockquote><p>感觉是最难的了，用py写的，不得不说py真是神中神，c++还要写计算字符串的函数。。。</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line">s=[]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">global</span> s,cnt,n</span><br><span class="line">    <span class="keyword">if</span>(i==n):</span><br><span class="line">        s+=<span class="built_in">str</span>(i)</span><br><span class="line">        ss=<span class="string">&#x27;&#x27;</span>.join(s)</span><br><span class="line">        sss=ss.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">eval</span>(sss)==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(ss)</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">        s.pop()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    t=<span class="built_in">str</span>(i)</span><br><span class="line">    s+=t</span><br><span class="line">    s+=<span class="string">&#x27; &#x27;</span></span><br><span class="line">    dfs(i+<span class="number">1</span>)</span><br><span class="line">    s.pop()</span><br><span class="line">    s+=<span class="string">&#x27;+&#x27;</span></span><br><span class="line">    dfs(i+<span class="number">1</span>)</span><br><span class="line">    s.pop()</span><br><span class="line">    s+=<span class="string">&#x27;-&#x27;</span></span><br><span class="line">    dfs(i+<span class="number">1</span>)</span><br><span class="line">    s.pop()</span><br><span class="line">    s.pop()</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="无脑博士的试管们"><a href="#无脑博士的试管们" class="headerlink" title="无脑博士的试管们"></a>无脑博士的试管们</h3><blockquote><p>无脑博士有三个容量分别是 A,B,C 升的试管，A,B,C分别是三个从 1到 20的整数，最初，A 和 B 试管都是空的，而 C 试管是装满硫酸铜溶液的。有时，无脑博士把硫酸铜溶液从一个试管倒到另一个试管中，直到被灌试管装满或原试管空了。当然每一次灌注都是完全的。由于无脑博士天天这么折腾，早已熟练，溶液在倒的过程中不会有丢失。</p><p>写一个程序去帮助无脑博士找出当 A 试管是空的时候，C 试管中硫酸铜溶液所剩量的所有可能性。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> vis[N][N][N];</span><br><span class="line"><span class="type">int</span> cnt[N]; <span class="comment">//全局声明数组不用初始化 主函数内部需要</span></span><br><span class="line"><span class="type">int</span> A,B,C;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[a][b][c]) <span class="keyword">return</span>;</span><br><span class="line">    vis[a][b][c]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        (a+b&gt;B)?<span class="built_in">dfs</span>(a-(B-b),B,c):<span class="built_in">dfs</span>(<span class="number">0</span>,a+b,c);</span><br><span class="line">        (a+c&gt;C)?<span class="built_in">dfs</span>(a-(C-c),b,C):<span class="built_in">dfs</span>(<span class="number">0</span>,b,a+c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        (b+a&gt;A)?<span class="built_in">dfs</span>(A,b-(A-a),c):<span class="built_in">dfs</span>(a+b,<span class="number">0</span>,c);</span><br><span class="line">        (b+c&gt;C)?<span class="built_in">dfs</span>(a,b-(C-c),C):<span class="built_in">dfs</span>(a,<span class="number">0</span>,b+c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        (c+a&gt;A)?<span class="built_in">dfs</span>(A,b,c-(A-a)):<span class="built_in">dfs</span>(a+c,b,<span class="number">0</span>);</span><br><span class="line">        (c+b&gt;B)?<span class="built_in">dfs</span>(a,B,c-(B-b)):<span class="built_in">dfs</span>(a,b+c,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="comment">// memset(cnt,0,sizeof(cnt));</span></span><br><span class="line">    cin&gt;&gt;A&gt;&gt;B&gt;&gt;C;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,C);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=B;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=C;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="number">0</span>][i][j]) cnt[j]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=C;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i]) cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图的m着色问题"><a href="#图的m着色问题" class="headerlink" title="图的m着色问题"></a>图的m着色问题</h3><blockquote><p>请考虑一个被空格分隔的，由1到N的整数组成的递增数列：1 2 3 …N。现在请在数列中插入表示加的“+”，或者表示减“-”，亦或者表示空白的“ ”(例如1-2 3就等于1-23)，来将每一对数字组合成一个表达式（第一个数字前无空格）。计算该表达式的结果并判断其值是否为0。请你写一个程序找出所有产生和为零的长度为N的数列。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顶点从1开始不是从0开始。。。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> G[N][N];</span><br><span class="line"><span class="type">int</span> n,k,m;</span><br><span class="line"><span class="type">int</span> sum,c[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ok</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;u;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[u][i]==<span class="number">1</span>&amp;&amp;c[u]==c[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==n+<span class="number">1</span>)&#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        c[u]=i;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">ok</span>(u)) <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">        c[u]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> t1,t2;</span><br><span class="line">    sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line">    <span class="built_in">memset</span>(G,<span class="number">0</span>,<span class="built_in">sizeof</span>(G));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        G[t1][t2]=G[t2][t1]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;sum;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有趣的素数"><a href="#有趣的素数" class="headerlink" title="有趣的素数"></a>有趣的素数</h3><blockquote><p>素数被广泛地应用于密码学中，所谓的公钥就是将想要传递的信息在编码时加入砠数，编码之后传给收信人，任何人收到此信息之后，若没有此收信人所拥有的秘钥，则在解密的过程中将会因为分解质因数过久而无法破解信息，可见素数在密码学中的重要性。<br>现在给你n（2&lt;&#x3D;n&lt;&#x3D;16）个正整数1,2,3…n，你的任务是把这n个正整数组成一个环，使得任意相邻的两个整数之和为一个素数，输出有多少种合法方案。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">40</span>;</span><br><span class="line"><span class="type">bool</span> prime[N],vis[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">int</span> a[N],n,cnt;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(x);i++)&#123; <span class="comment">// 用= 😅</span></span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(prime[a[s<span class="number">-1</span>]+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="comment">// for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line">            <span class="comment">//     cout&lt;&lt;a[i]&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]&amp;&amp;prime[i+a[s<span class="number">-1</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            a[s]=i;</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(s+<span class="number">1</span>);</span><br><span class="line">            vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">36</span>;i++)&#123;</span><br><span class="line">        prime[i]=<span class="built_in">isprime</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">        cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 课程复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理</title>
      <link href="/posts/15585/"/>
      <url>/posts/15585/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库保护"><a href="#数据库保护" class="headerlink" title="数据库保护"></a>数据库保护</h2><h3 id="冲突可串行化判断"><a href="#冲突可串行化判断" class="headerlink" title="冲突可串行化判断"></a>冲突可串行化判断</h3><p>简化成读写序列</p><p>冲突可串行化判定 –&gt; 前趋图中没有回路</p><p>对前趋图做拓扑排序 </p><h3 id="两段锁协议"><a href="#两段锁协议" class="headerlink" title="两段锁协议"></a>两段锁协议</h3><p>并发执行的所有事务都遵循2PL –&gt; 冲突可串行化</p><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)查询至少参与过两个国家级项目的学生的姓名;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> Sname</span><br><span class="line"><span class="keyword">from</span> S,P,S_P</span><br><span class="line"><span class="keyword">where</span> s.sno<span class="operator">=</span>s_p.sno <span class="keyword">and</span> s_p.pno<span class="operator">=</span>p.pno <span class="keyword">and</span> p.level<span class="operator">=</span><span class="string">&#x27;国家级&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.sno</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">2</span>;</span><br><span class="line"><span class="comment">-- (2)查询计算机学院没有参与过任何项目的学生学号和姓名;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> s.sno,sname</span><br><span class="line"><span class="keyword">from</span> s,d</span><br><span class="line"><span class="keyword">where</span> s.dno<span class="operator">=</span>d.dno <span class="keyword">and</span> d.dname<span class="operator">=</span><span class="string">&#x27;计算机学院&#x27;</span> <span class="keyword">and</span> s.sno <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> sno</span><br><span class="line">    <span class="keyword">from</span> s_p</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- (3)查询参与了王平负责的所有项目的学生姓名和联系方式;</span></span><br><span class="line"></span><br><span class="line">王平负责的所有项目 <span class="comment">--&gt; 小集合B</span></span><br><span class="line"></span><br><span class="line">s_p <span class="comment">--&gt; 大集合A xxx参与的项目</span></span><br><span class="line"></span><br><span class="line">不存在B<span class="operator">-</span>A</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A:</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> pno</span><br><span class="line"><span class="keyword">from</span> s_p</span><br><span class="line"><span class="keyword">where</span> sno<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line">B:</span><br><span class="line"><span class="keyword">select</span> pno</span><br><span class="line"><span class="keyword">from</span> p,s</span><br><span class="line"><span class="keyword">where</span> p.sno<span class="operator">=</span>s.sno <span class="keyword">and</span> s.sname<span class="operator">=</span><span class="string">&#x27;王平&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sno,sname</span><br><span class="line"><span class="keyword">from</span> s <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    (<span class="keyword">select</span> pno</span><br><span class="line">    <span class="keyword">from</span> p,s <span class="keyword">as</span> b</span><br><span class="line">    <span class="keyword">where</span> p.sno<span class="operator">=</span>b.sno <span class="keyword">and</span> b.sname<span class="operator">=</span><span class="string">&#x27;王平&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>(</span><br><span class="line">        <span class="keyword">select</span> pno</span><br><span class="line">        <span class="keyword">from</span> s_p</span><br><span class="line">        <span class="keyword">where</span> s_p.sno<span class="operator">=</span>a.sno</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">另一种方法</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sno,sname</span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">from</span> p,s <span class="keyword">as</span> b</span><br><span class="line">    <span class="keyword">where</span> p.sno<span class="operator">=</span>b.sno <span class="keyword">and</span> b.sname<span class="operator">=</span><span class="string">&#x27;王平&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">        <span class="keyword">from</span> s_p</span><br><span class="line">        <span class="keyword">where</span> p.pno<span class="operator">=</span>s_p.pno ans s_p.sno<span class="operator">=</span>s.sno;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- (4)对 2017年立项的项目，统计各学院立项项目的平均资助金额；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> d.dno,d.dname,<span class="built_in">avg</span>(Funding)</span><br><span class="line"><span class="keyword">from</span> d,p</span><br><span class="line"><span class="keyword">where</span> d.dno<span class="operator">=</span>p.dno <span class="keyword">and</span> p.year<span class="operator">=</span><span class="number">2017</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.dno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)建立视图，查询 2015年-2017年间各学院立项的国家级项目的数量，示学院</span></span><br><span class="line"><span class="comment">-- 名称和项目数量</span></span><br><span class="line"></span><br><span class="line">creat <span class="keyword">view</span> a</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> d.dname,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> d,p</span><br><span class="line"><span class="keyword">where</span> d.dno<span class="operator">=</span>p.pno <span class="keyword">and</span> p.year <span class="keyword">between</span> <span class="number">2015</span> <span class="keyword">and</span> <span class="number">2017</span> <span class="keyword">and</span> p.level<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.dno</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计与分析A</title>
      <link href="/posts/29925/"/>
      <url>/posts/29925/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>时间复杂性</p><p>渐进复杂性-跑的块</p><p>大O表示法</p><h2 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h2><p>时间复杂度推导</p><p>直接推导 递归树</p><p>合并排序 快排 线性时间选择</p><h2 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h2><p>单参数</p><p>图像压缩 最大子序列和</p><p>矩阵连乘</p><p>流水作业调度 错位计算</p><p>0-1背包 电路布线 最长公共子序列</p><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><p>贪心策略 步骤 时间复杂性</p><h2 id="回溯-分支限界"><a href="#回溯-分支限界" class="headerlink" title="回溯 分支限界"></a>回溯 分支限界</h2><p>0-1背包 装载问题</p>]]></content>
      
      
      <categories>
          
          <category> 课程复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再玩esp8266</title>
      <link href="/posts/37884/"/>
      <url>/posts/37884/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一次用esp8266还是在上一次，第一次烧了个wi-pwn，还挺好玩的，后来的badapple。。。就没了，有点浪费</p><p>今天突然想起来了，重新看了看太极的教程</p><p>发现之前感觉很难的东西，学的越多，感觉变得越ez</p><p>用的c语法与py贼像，对于我这个后端选手相当友好</p><h2 id="网络服务器"><a href="#网络服务器" class="headerlink" title="网络服务器"></a>网络服务器</h2><p>非常mini的server，主要用的ESP8266WebServer这个库，api都挺简单的，一看基本就会</p><h2 id="闪存文件系统"><a href="#闪存文件系统" class="headerlink" title="闪存文件系统"></a>闪存文件系统</h2><p>一个4MB的小闪存，也存不了什么东西</p>]]></content>
      
      
      <categories>
          
          <category> 开发板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA刷题记录</title>
      <link href="/posts/28683/"/>
      <url>/posts/28683/</url>
      
        <content type="html"><![CDATA[<p>仓库地址: <a href="https://github.com/Haorical/Code/tree/master/PTA/GPLT">https://github.com/Haorical/Code/tree/master/PTA/GPLT</a></p><blockquote><p>两周之内刷完GPLT L2和L3的题，持续更新，包括AK代码，坑点，和少量评论</p></blockquote><hr><blockquote><p>用一周刷完了l2的40道题</p></blockquote><p><img src="https://my-photos-test.oss-cn-hangzhou.aliyuncs.com/2021/202204211717702.png"></p><hr><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>今天天梯赛结束了 简单总结-200 +0分</p><p>题目很难，感觉远胜去年，题面太长，有的感觉表述的不是很清晰</p><p>模拟很多，本来l1很快就做完了，感觉还挺简单，虽然l1-7掉了一个点，但不影响大局，然后就被l2-1模拟卡了<br>半小时还不过，果断l2-2，一看简单结构体排序，掉了2个点，之后看3和4，3又不会了，什么牛马树<br>看了半天没看懂样例，考前刷了一堆二叉树感觉挺简单的，这个直接寄了，最后用了20分钟把剩下的题看完了<br>（只是看完了），因为知道没戏了，直接开摆了，4是个flyoad，也看了半天样例，发现不会。。。l3的题考前还打算看<br>看能不能混几分，第一题体面又很长，看了半天，拓扑排序。。不会，然后看第二个dfs，这个我熟，一看逆序，没背过<br>模板又不会了，最后剩了5分钟看了看l2-1，还是没过样例，最后116收场，属实太垃圾了。</p><p>结束了，看到知乎上陈越的回答，换出题团队了，以后还是这个趋势，明年有空就报，感觉不亏。</p><h2 id="刷题笔记"><a href="#刷题笔记" class="headerlink" title="刷题笔记"></a>刷题笔记</h2><ol><li>dj vis数组置为真</li><li>链表判空不用数量，判断结尾</li><li>注意数据类型比较，段错误可能int double比较&#x2F;无限循环&#x2F;数组给小了</li><li>指针定义时赋空</li><li>镜像树left right互换就行</li><li>union()时间过长 建议不用</li><li>bfs入队判空</li><li>并查集有时不用路径压缩 Union</li><li>make_heap()</li><li>并查集查连通块很简单</li><li>lower_bound查找&gt;&#x3D;目标第一个元素 upper_bound &gt;</li><li>set判断有无重复</li><li>sort() begin end</li><li>py sort()容易超时</li><li>注意yes no大小写</li><li>数组建树时注意递归结束条件</li></ol><h2 id="题目分类"><a href="#题目分类" class="headerlink" title="题目分类"></a>题目分类</h2><ol><li>dj最短路</li><li>模拟链表</li><li>简单贪心</li><li>二叉搜索树实现</li><li>set操作 set_intersection() set_union()使用</li><li>给两个遍历序列建树 再层序遍历</li><li>并查集+结构体排序 码量大</li><li>暴力模拟 动态规划(过不了)</li><li>结构体排序</li><li>并查集</li><li>给两个遍历序列镜像建树</li><li>堆实现(小&#x2F;大)</li><li>并查集&#x2F;搜索 求连通块</li><li>思维题 upper_bound()使用 容器操作</li><li>简单模拟</li><li>搜索求连通块</li><li>思维题 sort()使用</li><li>多项式除法</li><li>模拟 map vector set使用</li><li>记忆化搜索</li><li>结构体排序</li><li>模拟链表</li><li>图邻接表存储</li><li>并查集</li><li>并查集&#x2F;搜索求连通块</li><li>记忆化搜索</li><li>结构体排序</li><li>模拟</li><li>数学+模拟</li><li>map使用</li><li>记忆化搜索</li><li>栈使用</li><li>基础栈</li><li>恶心模拟</li><li>完全二叉树数组存储</li><li>模拟</li><li>栈+队列</li><li>记忆化搜索 vector排序</li><li>map+vector</li><li>简单模拟</li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="L2-001-紧急救援"><a href="#L2-001-紧急救援" class="headerlink" title="L2-001 紧急救援"></a>L2-001 紧急救援</h3><p>简单的dj模板题</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3fffffff</span>;</span><br><span class="line"><span class="type">int</span> n,m,st,ed;</span><br><span class="line"><span class="type">int</span> G[N][N];</span><br><span class="line"><span class="type">int</span> d[N],w[N];</span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pre[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dj</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d,d+N,INF);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="literal">false</span>&amp;&amp;d[j]&lt;MIN)&#123;</span><br><span class="line">                MIN=d[j];</span><br><span class="line">                u=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u]=<span class="literal">true</span>; <span class="comment">//又忘了</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[v]==<span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[u]+G[u][v]==d[v])&#123;</span><br><span class="line">                    pre[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(d[u]+G[u][v]&lt;d[v])&#123;</span><br><span class="line">                    pre[v].<span class="built_in">clear</span>();</span><br><span class="line">                    pre[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">                    d[v]=d[u]+G[u][v];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; path,tmp;</span><br><span class="line"><span class="type">int</span> mv=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==st)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        tmp.<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tmp.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            ans+=w[tmp[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans&gt;mv)&#123;</span><br><span class="line">            mv=ans;</span><br><span class="line">            path=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.<span class="built_in">push_back</span>(u);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pre[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(pre[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(G[<span class="number">0</span>],G[<span class="number">0</span>]+N*N,INF);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;st&gt;&gt;ed;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t1,t2,t3;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2&gt;&gt;t3;</span><br><span class="line">        G[t1][t2]=G[t2][t1]=t3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dj</span>(st);</span><br><span class="line">    <span class="built_in">dfs</span>(ed);</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;mv&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=path.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        cout&lt;&lt;path[i];</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-002-链表去重"><a href="#L2-002-链表去重" class="headerlink" title="L2-002 链表去重"></a>L2-002 链表去重</h3><blockquote><p>数组模拟链表，list存储链表</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> cur,next,data;</span><br><span class="line">&#125;node[N];</span><br><span class="line"><span class="type">bool</span> flag[N];</span><br><span class="line">vector&lt;Node&gt; l1,l2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p,n;</span><br><span class="line">    cin&gt;&gt;p&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line">        cin&gt;&gt;node[a].data&gt;&gt;node[a].next;</span><br><span class="line">        node[a].cur=a;</span><br><span class="line">    &#125;</span><br><span class="line">    l1.<span class="built_in">push_back</span>(node[p]);</span><br><span class="line">    flag[<span class="built_in">abs</span>(node[p].data)]=<span class="literal">true</span>;</span><br><span class="line">    p=node[p].next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=p;i!=<span class="number">-1</span>;)&#123;  <span class="comment">//巨坑 不要判断节点个数 判断链表下一个地址是不是-1</span></span><br><span class="line">        <span class="keyword">if</span>(flag[<span class="built_in">abs</span>(node[i].data)]==<span class="literal">false</span>)&#123;</span><br><span class="line">            flag[<span class="built_in">abs</span>(node[i].data)]=<span class="literal">true</span>;</span><br><span class="line">            Node tp=l1.<span class="built_in">back</span>(); <span class="comment">//取最后节点</span></span><br><span class="line">            l1.<span class="built_in">pop_back</span>(); <span class="comment">//弹出</span></span><br><span class="line">            tp.next=node[i].cur; <span class="comment">//更改上个节点的指针</span></span><br><span class="line">            l1.<span class="built_in">push_back</span>(tp);</span><br><span class="line">            l1.<span class="built_in">push_back</span>(node[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!l2.<span class="built_in">empty</span>())&#123; <span class="comment">//判空</span></span><br><span class="line">                Node tp=l2.<span class="built_in">back</span>();</span><br><span class="line">                l2.<span class="built_in">pop_back</span>();</span><br><span class="line">                tp.next=node[i].cur;</span><br><span class="line">                l2.<span class="built_in">push_back</span>(tp);</span><br><span class="line">            &#125;</span><br><span class="line">            l2.<span class="built_in">push_back</span>(node[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        i=node[i].next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l1.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>,l1[i].cur,l1[i].data,l1[i].next);</span><br><span class="line">    &#125;</span><br><span class="line">    Node t1=l1.<span class="built_in">back</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %d\n&quot;</span>,t1.cur,t1.data,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!l2.<span class="built_in">empty</span>())&#123; <span class="comment">//判空</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l2.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>,l2[i].cur,l2[i].data,l2[i].next);</span><br><span class="line">    &#125;</span><br><span class="line">    t1=l2.<span class="built_in">back</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %d&quot;</span>,t1.cur,t1.data,<span class="number">-1</span>);&#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-003-月饼"><a href="#L2-003-月饼" class="headerlink" title="L2-003 月饼"></a>L2-003 月饼</h3><blockquote><p>简单贪心</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y; <span class="comment">//测试点3 月饼数量可能为小数</span></span><br><span class="line">    <span class="type">double</span> a;</span><br><span class="line">&#125;nd[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(Node x,Node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.a&gt;y.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">double</span> d; <span class="comment">//段错误 int double类型比较造成</span></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;nd[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;nd[i].y;</span><br><span class="line">        nd[i].a=<span class="number">1.0</span>*nd[i].y/nd[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nd,nd+n,cmp);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;nd[0].x;</span></span><br><span class="line">    <span class="type">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(d&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d&gt;=nd[i].x)&#123;</span><br><span class="line">            n--;</span><br><span class="line">            d-=nd[i].x;</span><br><span class="line">            ans+=nd[i].y;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans+=d*nd[i].a;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            d=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,ans);</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单贪心</span></span><br></pre></td></tr></table></figure><h3 id="L2-004-这是二叉搜索树吗？"><a href="#L2-004-这是二叉搜索树吗？" class="headerlink" title="L2-004 这是二叉搜索树吗？"></a>L2-004 这是二叉搜索树吗？</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二叉搜索树</span></span><br><span class="line"><span class="comment">// 代码量比较大</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    node *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(node* &amp;root,<span class="type">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        root=<span class="keyword">new</span> node;</span><br><span class="line">        root-&gt;data=data;</span><br><span class="line">        root-&gt;left=root-&gt;right=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(data&lt;root-&gt;data) <span class="built_in">insert</span>(root-&gt;left,data);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">insert</span>(root-&gt;right,data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(node *root,vector&lt;<span class="type">int</span>&gt; &amp;v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    v.<span class="built_in">push_back</span>(root-&gt;data);</span><br><span class="line">    <span class="built_in">preOrder</span>(root-&gt;left,v);</span><br><span class="line">    <span class="built_in">preOrder</span>(root-&gt;right,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder2</span><span class="params">(node *root,vector&lt;<span class="type">int</span>&gt; &amp;v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    v.<span class="built_in">push_back</span>(root-&gt;data);</span><br><span class="line">    <span class="built_in">preOrder2</span>(root-&gt;right,v);</span><br><span class="line">    <span class="built_in">preOrder2</span>(root-&gt;left,v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(node *root,vector&lt;<span class="type">int</span>&gt; &amp;v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">postOrder</span>(root-&gt;left,v);</span><br><span class="line">    <span class="built_in">postOrder</span>(root-&gt;right,v);</span><br><span class="line">    v.<span class="built_in">push_back</span>(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder2</span><span class="params">(node *root,vector&lt;<span class="type">int</span>&gt; &amp;v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">postOrder2</span>(root-&gt;right,v);</span><br><span class="line">    <span class="built_in">postOrder2</span>(root-&gt;left,v);</span><br><span class="line">    v.<span class="built_in">push_back</span>(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v1,v2,v3;</span><br><span class="line">    node *root=<span class="literal">nullptr</span>; <span class="comment">//指针定义时一定要赋空指针</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;data;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(data);</span><br><span class="line">        <span class="built_in">insert</span>(root,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">preOrder</span>(root,v2);</span><br><span class="line">    <span class="built_in">preOrder2</span>(root,v3);</span><br><span class="line">    <span class="keyword">if</span>(v1==v2)&#123; <span class="comment">//原树的先序遍历</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        v1.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">postOrder</span>(root,v1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;v1[i];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;n<span class="number">-1</span>) cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(v1==v3)&#123; <span class="comment">//镜像树的先序遍历</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        v1.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">postOrder2</span>(root,v1);<span class="comment">//对镜像树后序遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;v1[i];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;n<span class="number">-1</span>) cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-005-集合相似度"><a href="#L2-005-集合相似度" class="headerlink" title="L2-005 集合相似度"></a>L2-005 集合相似度</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 集合交集</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    vector&lt;set&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">v</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="type">int</span> t,k;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;t;j++)&#123;</span><br><span class="line">            cin&gt;&gt;k;</span><br><span class="line">            s.<span class="built_in">insert</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        v[i]=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s1,s2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">        s1.<span class="built_in">clear</span>(); <span class="comment">//一定clear</span></span><br><span class="line">        s2.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="type">int</span> t1,t2;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        t1--,t2--;</span><br><span class="line">        <span class="built_in">set_intersection</span>(v[t1].<span class="built_in">begin</span>(),v[t1].<span class="built_in">end</span>(),v[t2].<span class="built_in">begin</span>(),v[t2].<span class="built_in">end</span>(),<span class="built_in">inserter</span>(s1,s1.<span class="built_in">begin</span>())); <span class="comment">//集合函数用法</span></span><br><span class="line">        <span class="comment">// set_union(v[t1].begin(),v[t1].end(),v[t2].begin(),v[t2].end(),inserter(s2,s2.begin()));       </span></span><br><span class="line">        <span class="type">int</span> nc=s1.<span class="built_in">size</span>(),nt=v[t1].<span class="built_in">size</span>()+v[t2].<span class="built_in">size</span>()-nc; <span class="comment">//不用union就不会超时了</span></span><br><span class="line">        <span class="type">double</span> ans=<span class="number">1.0</span>*nc/nt*<span class="number">100</span>; <span class="comment">//乘1.0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2f%%\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-006-树的遍历"><a href="#L2-006-树的遍历" class="headerlink" title="L2-006 树的遍历"></a>L2-006 树的遍历</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    node *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> pre[N],in[N],post[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function">node* <span class="title">create</span><span class="params">(<span class="type">int</span> postL,<span class="type">int</span> postR,<span class="type">int</span> L,<span class="type">int</span> R)</span></span>&#123; <span class="comment">//建立二叉树</span></span><br><span class="line">    <span class="keyword">if</span>(postL&gt;postR) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    node *root=<span class="keyword">new</span> node;</span><br><span class="line">    root-&gt;data=post[postR]; <span class="comment">//后序数组最后是根节点</span></span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k=L;k&lt;=R;k++)&#123; <span class="comment">//在中序遍历中查找根节点</span></span><br><span class="line">        <span class="keyword">if</span>(in[k]==post[postR])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> numLeft=k-L;<span class="comment">//左子树节点个数  </span></span><br><span class="line">    <span class="comment">//postR 和 k 是根节点， 不包含</span></span><br><span class="line">    root-&gt;left=<span class="built_in">create</span>(postL,postL+numLeft<span class="number">-1</span>,L,k<span class="number">-1</span>); <span class="comment">//建立左子树 更新中序R=k-1</span></span><br><span class="line">    root-&gt;right=<span class="built_in">create</span>(postL+numLeft,postR<span class="number">-1</span>,k+<span class="number">1</span>,R);<span class="comment">//建立右子树 更新中序L=k+1</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(node *root)</span></span>&#123;</span><br><span class="line">    queue&lt;node*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        node* now=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        num++;</span><br><span class="line">        cout&lt;&lt;now-&gt;data;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;n) cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;left!=<span class="literal">nullptr</span>) q.<span class="built_in">push</span>(now-&gt;left); <span class="comment">//注意判空</span></span><br><span class="line">        <span class="keyword">if</span>(now-&gt;right!=<span class="literal">nullptr</span>) q.<span class="built_in">push</span>(now-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;post[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;in[i];</span><br><span class="line">    &#125;</span><br><span class="line">    node *root=<span class="built_in">create</span>(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">bfs</span>(root);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-007-家庭房产"><a href="#L2-007-家庭房产" class="headerlink" title="L2-007 家庭房产"></a>L2-007 家庭房产</h3><h3 id="L2-008-最长对称子串"><a href="#L2-008-最长对称子串" class="headerlink" title="L2-008 最长对称子串"></a>L2-008 最长对称子串</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">char</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin.<span class="built_in">getline</span>(a,N);</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">        <span class="comment">//奇数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;i-j&gt;=<span class="number">0</span>&amp;&amp;i+j&lt;l;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i-j]!=a[i+j]) <span class="keyword">break</span>;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,<span class="number">2</span>*j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//偶数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;i-j&gt;=<span class="number">0</span>&amp;&amp;i+j+<span class="number">1</span>&lt;l;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i-j]!=a[i+j+<span class="number">1</span>]) <span class="keyword">break</span>;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,<span class="number">2</span>*j+<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-009-抢红包"><a href="#L2-009-抢红包" class="headerlink" title="L2-009 抢红包"></a>L2-009 抢红包</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单结构体排序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> id,cnt;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;nd[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.y==b.y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.cnt==b.cnt)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">return</span> a.cnt&gt;b.cnt;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span> a.y&gt;b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        nd[i].id=i;</span><br><span class="line">        cin&gt;&gt;k;</span><br><span class="line">        <span class="type">int</span> t1,t2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">            nd[t1].id=t1;</span><br><span class="line">            nd[t1].y+=t2;</span><br><span class="line">            nd[t1].cnt++;</span><br><span class="line">            nd[i].y-=t2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nd+<span class="number">1</span>,nd+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %.2f&quot;</span>,nd[i].id,<span class="number">1.0</span>*nd[i].y/<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=n<span class="number">-1</span>) cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-010-排座位"><a href="#L2-010-排座位" class="headerlink" title="L2-010 排座位"></a>L2-010 排座位</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//感觉是并查集，就是并查集</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> flag[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="type">int</span> a=<span class="built_in">Find</span>(f[x]);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    a=<span class="built_in">Find</span>(a); </span><br><span class="line">    b=<span class="built_in">Find</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(a!=b) f[a]=b; <span class="comment">//容易错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t1,t2,t3;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2&gt;&gt;t3;</span><br><span class="line">        <span class="keyword">if</span>(t3==<span class="number">1</span>) <span class="built_in">Union</span>(t1,t2);</span><br><span class="line">        <span class="keyword">else</span> flag[t1][t2]=flag[t2][t1]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;Find(t1)&lt;&lt;&quot; &quot;&lt;&lt;Find(t2)&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Find</span>(t1)==<span class="built_in">Find</span>(t2)&amp;&amp;flag[t1][t2]!=<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;No problem&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Find</span>(t1)!=<span class="built_in">Find</span>(t2)&amp;&amp;flag[t1][t2]!=<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Find</span>(t1)==<span class="built_in">Find</span>(t2)&amp;&amp;flag[t1][t2]==<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;OK but...&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No way&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;k<span class="number">-1</span>) cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-011-玩转二叉树"><a href="#L2-011-玩转二叉树" class="headerlink" title="L2-011 玩转二叉树"></a>L2-011 玩转二叉树</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 也是建树，和6题差不多，一遍过</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">struct</span>  <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    node *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> pre[N],in[N],n;</span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">create</span><span class="params">(<span class="type">int</span> pl,<span class="type">int</span> pr,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pl&gt;pr) <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">//return条件</span></span><br><span class="line">    node *root=<span class="keyword">new</span> node;</span><br><span class="line">    root-&gt;data=pre[pl];</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k=l;k&lt;=r;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in[k]==pre[pl]) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len=k-l;</span><br><span class="line">    root-&gt;right=<span class="built_in">create</span>(pl+<span class="number">1</span>,pl+len,l,k<span class="number">-1</span>);</span><br><span class="line">    root-&gt;left=<span class="built_in">create</span>(pl+len+<span class="number">1</span>,pr,k+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(node* root)</span></span>&#123;</span><br><span class="line">    queue&lt;node*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        node *now=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout&lt;&lt;now-&gt;data;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;n) cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;left!=<span class="literal">nullptr</span>) q.<span class="built_in">push</span>(now-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;right!=<span class="literal">nullptr</span>) q.<span class="built_in">push</span>(now-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;in[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;pre[i];</span><br><span class="line">    &#125;</span><br><span class="line">    node *root=<span class="built_in">create</span>(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">bfs</span>(root);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-012-关于堆的判断"><a href="#L2-012-关于堆的判断" class="headerlink" title="L2-012    关于堆的判断"></a>L2-012    关于堆的判断</h3><h3 id="L2-013-红色警报"><a href="#L2-013-红色警报" class="headerlink" title="L2-013    红色警报"></a>L2-013    红色警报</h3><p>并查集实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 并查集通过查祖宗节点可以找到有几个集合，用来查连通块数量很好用</span></span><br><span class="line"><span class="comment">// 改成循环还是段错误，数组开小了</span></span><br><span class="line"><span class="comment">// 尝试搜索，csdn都用的dfs,不过bfs不是用来求连通块更好用吗？？？</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;nd[<span class="number">10</span>*N];<span class="comment">//这里开小了，应该按m道路条数最大值开，不用城市数开。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        f[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findf</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=x;</span><br><span class="line">    <span class="keyword">while</span>(t!=f[t])&#123;</span><br><span class="line">        t=f[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> a=x;</span><br><span class="line">    <span class="keyword">while</span>(f[a]!=t)&#123;</span><br><span class="line">        <span class="type">int</span> z=a;</span><br><span class="line">        f[z]=t;</span><br><span class="line">        a=f[z];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">    <span class="comment">// if(x==f[x]) return x;</span></span><br><span class="line">    <span class="comment">// f[x]=findf(f[x]);</span></span><br><span class="line">    <span class="comment">// return f[x]; </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    a=<span class="built_in">findf</span>(a);</span><br><span class="line">    b=<span class="built_in">findf</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(a!=b) f[a]=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i]==i&amp;&amp;vis[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;nd[i].x&gt;&gt;nd[i].y;</span><br><span class="line">        <span class="built_in">Union</span>(nd[i].x,nd[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt1=<span class="built_in">count</span>(),cnt2=<span class="number">0</span>,cnt3=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k,u;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        cin&gt;&gt;u;</span><br><span class="line">        cnt3++;</span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">init</span>();<span class="comment">//每次都要初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[nd[i].x]&amp;&amp;!vis[nd[i].y]) <span class="built_in">Union</span>(nd[i].x,nd[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        cnt2=<span class="built_in">count</span>();</span><br><span class="line">        <span class="keyword">if</span>(cnt1&lt;cnt2) <span class="built_in">printf</span>(<span class="string">&quot;Red Alert: City %d is lost!&quot;</span>,u);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;City %d is lost.&quot;</span>,u);</span><br><span class="line">        cnt1=cnt2; <span class="comment">//集合个数每次都要更新</span></span><br><span class="line">        <span class="keyword">if</span>(k&gt;<span class="number">0</span>) cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt3==n) <span class="built_in">printf</span>(<span class="string">&quot;\nGame Over.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bfs实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//尝试bfs搜索实现,我太nb了,一遍过</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N],lost;</span><br><span class="line"><span class="type">bool</span> inq[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">int</span> n,m,k,u;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(x);</span><br><span class="line">    inq[x]=<span class="literal">true</span>; <span class="comment">//inq队列，判断是否入过队，约等于有没有访问过</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> now=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v[now].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inq[v[now][i]]==<span class="literal">false</span>)&#123;</span><br><span class="line">                q.<span class="built_in">push</span>(v[now][i]);</span><br><span class="line">                inq[v[now][i]]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> t1,t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        v[t1].<span class="built_in">push_back</span>(t2);</span><br><span class="line">        v[t2].<span class="built_in">push_back</span>(t1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(inq[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="built_in">bfs</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(inq,<span class="number">0</span>,<span class="built_in">sizeof</span>(inq));</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="type">int</span> ans,cnt3=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        cnt3++;</span><br><span class="line">        cin&gt;&gt;u;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(inq,<span class="number">0</span>,<span class="built_in">sizeof</span>(inq));<span class="comment">//每次初始化</span></span><br><span class="line">        lost.<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lost.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            inq[lost[i]]=<span class="literal">true</span>;<span class="comment">//从lost里给inq赋初值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inq[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="built_in">bfs</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;ans) <span class="built_in">printf</span>(<span class="string">&quot;Red Alert: City %d is lost!&quot;</span>,u);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;City %d is lost.&quot;</span>,u);</span><br><span class="line">        sum=ans;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;<span class="number">0</span>) cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt3==n) <span class="built_in">printf</span>(<span class="string">&quot;\nGame Over.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-014-列车调度"><a href="#L2-014-列车调度" class="headerlink" title="L2-014    列车调度"></a>L2-014    列车调度</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似模拟，维护了一个最小值集合的队列</span></span><br><span class="line"><span class="comment">//lower_bound查找&gt;=目标第一个元素 upper_bound &gt;</span></span><br><span class="line"><span class="comment">//这里用upper_bound</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> t,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        <span class="comment">// 性质决定肯定是有序的，直接upper_bound看有没有更大中的最小值</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;::iterator it=<span class="built_in">upper_bound</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),t); </span><br><span class="line">        <span class="keyword">if</span>(it==v.<span class="built_in">end</span>())&#123;</span><br><span class="line">            v.<span class="built_in">push_back</span>(t);<span class="comment">//没有直接插进去</span></span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> j=it-v.<span class="built_in">begin</span>();<span class="comment">//有就替换掉</span></span><br><span class="line">            v[j]=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-015-互评成绩"><a href="#L2-015-互评成绩" class="headerlink" title="L2-015    互评成绩"></a>L2-015    互评成绩</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单模拟</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> n,k,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> t1=<span class="number">100</span>,t2=<span class="number">0</span>,t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            cin&gt;&gt;t;</span><br><span class="line">            a[i]+=t;</span><br><span class="line">            t1=<span class="built_in">min</span>(t1,t);</span><br><span class="line">            t2=<span class="built_in">max</span>(t2,t);</span><br><span class="line">        &#125;</span><br><span class="line">        a[i]-=(t1+t2); <span class="comment">//天才做法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+n,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=m<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">double</span> d=<span class="number">1.0</span>*a[i]/(k<span class="number">-2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3f&quot;</span>,d);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>) cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-016-愿天下有情人都是失散多年的兄妹"><a href="#L2-016-愿天下有情人都是失散多年的兄妹" class="headerlink" title="L2-016    愿天下有情人都是失散多年的兄妹"></a>L2-016    愿天下有情人都是失散多年的兄妹</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初看并查集？实际搜索，类似连通块</span></span><br><span class="line"><span class="comment">// 尝试bfs,实际上dfs更简洁</span></span><br><span class="line"><span class="comment">// 用下标表示id的时候，空间尽可能大</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">bool</span> inq[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1,v2;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> sex;</span><br><span class="line">    <span class="type">int</span> step;</span><br><span class="line">    <span class="type">int</span> fid,mid;</span><br><span class="line">&#125;nd[N];</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="comment">//标准bfs</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    v.<span class="built_in">push_back</span>(x);</span><br><span class="line">    q.<span class="built_in">push</span>(x);</span><br><span class="line">    nd[x].step=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> now=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(nd[now].step==<span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(inq[nd[now].fid]==<span class="literal">false</span>&amp;&amp;nd[now].fid!=<span class="number">-1</span>)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(nd[now].fid);</span><br><span class="line">            inq[nd[now].fid]=<span class="literal">true</span>;</span><br><span class="line">            nd[nd[now].fid].step=nd[now].step+<span class="number">1</span>;</span><br><span class="line">            v.<span class="built_in">push_back</span>(nd[now].fid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(inq[nd[now].mid]==<span class="literal">false</span>&amp;&amp;nd[now].mid!=<span class="number">-1</span>)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(nd[now].mid);</span><br><span class="line">            inq[nd[now].mid]=<span class="literal">true</span>;</span><br><span class="line">            nd[nd[now].mid].step=nd[now].step+<span class="number">1</span>;</span><br><span class="line">            v.<span class="built_in">push_back</span>(nd[now].mid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> t1,t2,t3;</span><br><span class="line">    <span class="type">char</span> s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        nd[i].fid=nd[i].mid=<span class="number">-1</span>;<span class="comment">//全部初始化为-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;s&gt;&gt;t2&gt;&gt;t3;</span><br><span class="line">        nd[t1].sex=(s==<span class="string">&#x27;M&#x27;</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">        nd[t1].fid=t2;</span><br><span class="line">        <span class="keyword">if</span>(t2!=<span class="number">-1</span>) nd[t2].sex=<span class="number">1</span>; <span class="comment">//要标记父母性别</span></span><br><span class="line">        nd[t1].mid=t3;</span><br><span class="line">        <span class="keyword">if</span>(t3!=<span class="number">-1</span>) nd[t3].sex=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        <span class="keyword">if</span>(nd[t1].sex==nd[t2].sex)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Never Mind&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">memset</span>(inq,<span class="number">0</span>,<span class="built_in">sizeof</span>(inq));</span><br><span class="line">            v1=<span class="built_in">bfs</span>(t1); <span class="comment">//t1的5代所有人</span></span><br><span class="line">            <span class="built_in">memset</span>(inq,<span class="number">0</span>,<span class="built_in">sizeof</span>(inq));</span><br><span class="line">            v2=<span class="built_in">bfs</span>(t2); <span class="comment">//t2 5代所有人</span></span><br><span class="line">            set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">            <span class="type">int</span> l1=v1.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> l2=v2.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l1;i++)&#123;</span><br><span class="line">                s.<span class="built_in">insert</span>(v1[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l2;i++)&#123;</span><br><span class="line">                s.<span class="built_in">insert</span>(v2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l1+l2==s.<span class="built_in">size</span>()) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>; <span class="comment">//有重复的一去重大小会变</span></span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;<span class="number">0</span>) cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//     system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-017-人以群分"><a href="#L2-017-人以群分" class="headerlink" title="L2-017    人以群分"></a>L2-017    人以群分</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思维题 sort会用就能过</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>); <span class="comment">//注意是否是0开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> aa,diff;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        aa=n/<span class="number">2</span>;</span><br><span class="line">        diff=a[n]<span class="number">-2</span>*a[aa];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        aa=n/<span class="number">2</span>;</span><br><span class="line">        diff=a[n]<span class="number">-2</span>*a[aa];</span><br><span class="line">        <span class="keyword">if</span>(a[n]<span class="number">-2</span>*a[aa+<span class="number">1</span>]&gt;diff)&#123;</span><br><span class="line">            diff=a[n]<span class="number">-2</span>*a[aa+<span class="number">1</span>];</span><br><span class="line">            aa++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Outgoing #: %d\nIntroverted #: %d\nDiff = %d&quot;</span>,n-aa,aa,diff);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-018-多项式A除以B"><a href="#L2-018-多项式A除以B" class="headerlink" title="L2-018    多项式A除以B"></a>L2-018    多项式A除以B</h3><h3 id="L2-019-悄悄关注"><a href="#L2-019-悄悄关注" class="headerlink" title="L2-019    悄悄关注"></a>L2-019    悄悄关注</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单模拟</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e3</span>+<span class="number">10</span>;</span><br><span class="line">set&lt;string&gt; s;</span><br><span class="line">vector&lt;string&gt; v,v1;</span><br><span class="line">map&lt;string,<span class="type">int</span>&gt; m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string t1;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1;</span><br><span class="line">        s.<span class="built_in">insert</span>(t1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="type">int</span> zz=k;</span><br><span class="line">    <span class="type">int</span> t2,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        v.<span class="built_in">push_back</span>(t1);</span><br><span class="line">        m[t1]=t2;</span><br><span class="line">        sum+=t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;zz;i++)&#123;</span><br><span class="line">        <span class="type">int</span> s1=s.<span class="built_in">size</span>();</span><br><span class="line">        s.<span class="built_in">insert</span>(v[i]);</span><br><span class="line">        <span class="type">int</span> s2=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(s2&gt;s1&amp;&amp;zz*m[v[i]]&gt;sum)&#123;</span><br><span class="line">            v1.<span class="built_in">push_back</span>(v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v1.<span class="built_in">size</span>()==<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;Bing Mei You&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v1.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            cout&lt;&lt;v1[i]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用python很简单，但是最后一个样例超时了，我也不会优化，换成c++</span></span><br><span class="line">a=<span class="built_in">input</span>().split()</span><br><span class="line">n=<span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">del</span>(a[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">k=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">l1=[]</span><br><span class="line">d1=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    t1,t2=<span class="built_in">input</span>().split()</span><br><span class="line">    l1.append(t1)</span><br><span class="line">    d1[t1]=<span class="built_in">int</span>(t2)</span><br><span class="line">    <span class="built_in">sum</span>+=<span class="built_in">int</span>(t2)</span><br><span class="line"><span class="built_in">sum</span>=<span class="built_in">sum</span>/k</span><br><span class="line">l2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> a <span class="keyword">and</span> d1[i]&gt;<span class="built_in">sum</span>:</span><br><span class="line">        l2.append(i)</span><br><span class="line">l2.sort()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l2:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="L2-020-功夫传人"><a href="#L2-020-功夫传人" class="headerlink" title="L2-020    功夫传人"></a>L2-020    功夫传人</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 并查集变形？</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> height[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">finds</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(height[x]==<span class="number">0</span>) height[x]=<span class="built_in">finds</span>(s[x])+<span class="number">1</span>; <span class="comment">//记忆化搜索，没有的话，最后一个点会超时</span></span><br><span class="line">    <span class="keyword">return</span> height[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">double</span> z,r;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;z&gt;&gt;r;</span><br><span class="line">    <span class="type">int</span> k,t;</span><br><span class="line">    <span class="type">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;k;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line">            cin&gt;&gt;t;</span><br><span class="line">            <span class="type">int</span> sh=<span class="built_in">finds</span>(i);</span><br><span class="line">            <span class="type">double</span> d=z*<span class="built_in">pow</span>(<span class="number">1</span>-r/<span class="number">100</span>,sh)*t;</span><br><span class="line">            ans+=d;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">                cin&gt;&gt;t;</span><br><span class="line">                s[t]=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">int</span>(ans);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-021-点赞狂魔"><a href="#L2-021-点赞狂魔" class="headerlink" title="L2-021    点赞狂魔"></a>L2-021    点赞狂魔</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 热身赛原题，考试时做出来了，结构体排序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">int</span> avg;</span><br><span class="line">&#125;nd[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.cnt==y.cnt) <span class="keyword">return</span> x.avg&lt;y.avg; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.cnt&gt;y.cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,k,t;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line">cin&gt;&gt;nd[i].name;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">s.<span class="built_in">insert</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">nd[i].cnt=s.<span class="built_in">size</span>();</span><br><span class="line">nd[i].avg=k-nd[i].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(nd,nd+n,cmp);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) cout&lt;&lt;nd[<span class="number">0</span>].name&lt;&lt;<span class="string">&quot; - -&quot;</span>;<span class="comment">//容易少写</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) cout&lt;&lt;nd[<span class="number">0</span>].name&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;nd[<span class="number">1</span>].name&lt;&lt;<span class="string">&quot; -&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;nd[<span class="number">0</span>].name&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;nd[<span class="number">1</span>].name&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;nd[<span class="number">2</span>].name;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-022-重排链表"><a href="#L2-022-重排链表" class="headerlink" title="L2-022    重排链表"></a>L2-022    重排链表</h3><h3 id="L2-023-图着色问题"><a href="#L2-023-图着色问题" class="headerlink" title="L2-023    图着色问题"></a>L2-023    图着色问题</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初看比较唬人，实际考图邻接表存储</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> v,e,k;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; sss;</span><br><span class="line"><span class="type">int</span> color[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;v&gt;&gt;e&gt;&gt;k;</span><br><span class="line">    <span class="type">int</span> t1,t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;e;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        g[t1].<span class="built_in">push_back</span>(t2);</span><br><span class="line">        g[t2].<span class="built_in">push_back</span>(t1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(color,<span class="number">0</span>,<span class="built_in">sizeof</span>(color));</span><br><span class="line">        sss.<span class="built_in">clear</span>();<span class="comment">// 记得clear</span></span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=v;j++)&#123;</span><br><span class="line">            cin&gt;&gt;color[j];</span><br><span class="line">            sss.<span class="built_in">insert</span>(color[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sss.<span class="built_in">size</span>()!=k) flag=<span class="number">1</span>; <span class="comment">// 必须就这几个颜色多了少了都不行</span></span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=v;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> len=g[j].<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">0</span>;t&lt;len;t++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(color[j]==color[g[j][t]])&#123;</span><br><span class="line">                        flag=<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        <span class="keyword">if</span>(flag) cout&lt;&lt;<span class="string">&quot;No&quot;</span>; <span class="comment">// 注意yes no大小写</span></span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">0</span>) cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-024-部落"><a href="#L2-024-部落" class="headerlink" title="L2-024    部落"></a>L2-024    部落</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础并查集</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> f[N],n=<span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findf</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x]) <span class="keyword">return</span> x;</span><br><span class="line">    f[x]=<span class="built_in">findf</span>(f[x]);</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionf</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    a=<span class="built_in">findf</span>(a);</span><br><span class="line">    b=<span class="built_in">findf</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(a!=b) f[a]=b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        f[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cnt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i]==i&amp;&amp;vis[i]) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k,t1,t2,t3;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        vis[t2]=<span class="literal">true</span>;</span><br><span class="line">        t1--;</span><br><span class="line">        n=<span class="built_in">max</span>(n,t2);</span><br><span class="line">        <span class="keyword">while</span>(t1--)&#123;</span><br><span class="line">            cin&gt;&gt;t3;</span><br><span class="line">            n=<span class="built_in">max</span>(n,t3); <span class="comment">//忘了写1 4测试点没过</span></span><br><span class="line">            vis[t3]=<span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">unionf</span>(t2,t3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) sum++; </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="built_in">cnt</span>()&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;t1;</span><br><span class="line">    <span class="keyword">while</span>(t1--)&#123;&#123;</span><br><span class="line">        cin&gt;&gt;t2&gt;&gt;t3;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">findf</span>(t2)==<span class="built_in">findf</span>(t3)) cout&lt;&lt;<span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(t1&gt;<span class="number">0</span>) cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-025-分而治之"><a href="#L2-025-分而治之" class="headerlink" title="L2-025    分而治之"></a>L2-025    分而治之</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 和13红色警戒那题差不多，求连通块，并查集，搜索都可以做</span></span><br><span class="line"><span class="comment">// 这里用的并查集码量少</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> f[N],n,m;</span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;nd[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]&amp;&amp;f[i]==i) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findf</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x]) <span class="keyword">return</span> x;</span><br><span class="line">    f[x]=<span class="built_in">findf</span>(f[x]);</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionf</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    a=<span class="built_in">findf</span>(a);</span><br><span class="line">    b=<span class="built_in">findf</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(a!=b) f[a]=b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> t1,t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        nd[i].x=t1;</span><br><span class="line">        nd[i].y=t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="type">int</span> t3;</span><br><span class="line">        cin&gt;&gt;t3;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t3;i++)&#123;</span><br><span class="line">            cin&gt;&gt;t2;</span><br><span class="line">            vis[t2]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[nd[i].x]&amp;&amp;!vis[nd[i].y]) <span class="built_in">unionf</span>(nd[i].x,nd[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum1=<span class="built_in">count</span>();</span><br><span class="line">        <span class="comment">//cout&lt;&lt;sum0&lt;&lt;&quot; &quot;&lt;&lt;t3&lt;&lt;&quot; &quot;&lt;&lt;sum1&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(t3+sum1==n) cout&lt;&lt;<span class="string">&quot;YES&quot;</span>; <span class="comment">//这里第一次判断错了</span></span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;<span class="number">0</span>) cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-026-小字辈"><a href="#L2-026-小字辈" class="headerlink" title="L2-026    小字辈"></a>L2-026    小字辈</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记忆化搜索 和20题差不多</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> f[N],c[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(c[s]==<span class="number">-1</span>) c[s]=<span class="built_in">dfs</span>(f[s])+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> c[s]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,t;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">-1</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        f[i]=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i]==<span class="number">-1</span>)&#123;</span><br><span class="line">            c[i]=<span class="built_in">dfs</span>(i);</span><br><span class="line">            sum=<span class="built_in">max</span>(sum,c[i]);</span><br><span class="line">            v[c[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> len=v[sum].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        cout&lt;&lt;v[sum][i];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;len<span class="number">-1</span>) cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-027-名人堂与代金券"><a href="#L2-027-名人堂与代金券" class="headerlink" title="L2-027    名人堂与代金券"></a>L2-027    名人堂与代金券</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记忆化搜索 和20题差不多</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> f[N],c[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(c[s]==<span class="number">-1</span>) c[s]=<span class="built_in">dfs</span>(f[s])+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> c[s]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,t;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">-1</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        f[i]=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i]==<span class="number">-1</span>)&#123;</span><br><span class="line">            c[i]=<span class="built_in">dfs</span>(i);</span><br><span class="line">            sum=<span class="built_in">max</span>(sum,c[i]);</span><br><span class="line">            v[c[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> len=v[sum].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        cout&lt;&lt;v[sum][i];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;len<span class="number">-1</span>) cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-028-秀恩爱分得快"><a href="#L2-028-秀恩爱分得快" class="headerlink" title="L2-028    秀恩爱分得快"></a>L2-028    秀恩爱分得快</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟 太恶心了，挂了几个测试点，考试的时候我绝对不会改的</span></span><br><span class="line"><span class="comment">// 得用字符串存，正确的我放后面了</span></span><br><span class="line"><span class="comment">// #include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="comment">// using namespace std;</span></span><br><span class="line"><span class="comment">// const int N=2010;</span></span><br><span class="line"><span class="comment">// double a[N][N];</span></span><br><span class="line"><span class="comment">// int tp[N];</span></span><br><span class="line"><span class="comment">// int main()&#123;</span></span><br><span class="line"><span class="comment">//     int n,m,k;</span></span><br><span class="line"><span class="comment">//     cin&gt;&gt;n&gt;&gt;m;</span></span><br><span class="line"><span class="comment">//     while(m--)&#123;</span></span><br><span class="line"><span class="comment">//         cin&gt;&gt;k;</span></span><br><span class="line"><span class="comment">//         memset(tp,0,sizeof(tp));</span></span><br><span class="line"><span class="comment">//         for(int i=0;i&lt;k;i++)&#123;</span></span><br><span class="line"><span class="comment">//             cin&gt;&gt;tp[i];</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         double tt=1.0/k;</span></span><br><span class="line"><span class="comment">//         for(int i=0;i&lt;k;i++)&#123;</span></span><br><span class="line"><span class="comment">//             for(int j=i+1;j&lt;k;j++)&#123;</span></span><br><span class="line"><span class="comment">//                 if(tp[i]*tp[j]&lt;0 || (tp[i]==0&amp;&amp;tp[j]&lt;0) || (tp[i]&lt;0&amp;&amp;tp[j]==0)) &#123;</span></span><br><span class="line"><span class="comment">//                     a[tp[i]+1000][tp[j]+1000]+=tt;</span></span><br><span class="line"><span class="comment">//                     a[tp[j]+1000][tp[i]+1000]+=tt;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     int t1,t2;</span></span><br><span class="line"><span class="comment">//     cin&gt;&gt;t1&gt;&gt;t2;</span></span><br><span class="line"><span class="comment">//     vector&lt;int&gt; v1,v2;</span></span><br><span class="line"><span class="comment">//     double MAX,MAX1,MAX2;</span></span><br><span class="line"><span class="comment">//     MAX=MAX1=MAX2=a[t1+1000][t2+1000];</span></span><br><span class="line"><span class="comment">//     for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">//         if(a[t1+1000][i]&gt;MAX1)&#123;</span></span><br><span class="line"><span class="comment">//             MAX1=a[t1+1000][i];</span></span><br><span class="line"><span class="comment">//             v1.clear();</span></span><br><span class="line"><span class="comment">//             v1.push_back(i-1000);</span></span><br><span class="line"><span class="comment">//         &#125;else if(a[t1+1000][i]==MAX1)&#123;</span></span><br><span class="line"><span class="comment">//             v1.push_back(i-1000);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//     for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">//         if(a[t2+1000][i]&gt;MAX2)&#123;</span></span><br><span class="line"><span class="comment">//             MAX2=a[t2+1000][i];</span></span><br><span class="line"><span class="comment">//             v2.clear();</span></span><br><span class="line"><span class="comment">//             v2.push_back(i-1000);</span></span><br><span class="line"><span class="comment">//         &#125;else if(a[t2+1000][i]==MAX2)&#123;</span></span><br><span class="line"><span class="comment">//             v2.push_back(i-1000);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     if(MAX1==MAX2&amp;&amp;MAX==MAX1) cout&lt;&lt;t1&lt;&lt;&#x27; &#x27;&lt;&lt;t2;</span></span><br><span class="line"><span class="comment">//     else&#123;</span></span><br><span class="line"><span class="comment">//         if(t1&gt;0) sort(v1.begin(),v1.end(),greater&lt;int&gt;());</span></span><br><span class="line"><span class="comment">//         else sort(v1.begin(),v1.end());</span></span><br><span class="line"><span class="comment">//         if(t2&gt;0) sort(v2.begin(),v2.end(),greater&lt;int&gt;());</span></span><br><span class="line"><span class="comment">//         else sort(v2.begin(),v2.end());</span></span><br><span class="line"><span class="comment">//         for(auto i:v1) cout&lt;&lt;t1&lt;&lt;&#x27; &#x27;&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//         for(auto i:v2) cout&lt;&lt;t2&lt;&lt;&#x27; &#x27;&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//     &#125; </span></span><br><span class="line"><span class="comment">//     system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">//     return 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//AC</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(a)==<span class="number">1000</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(b)==<span class="number">1000</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(a)&lt;<span class="built_in">abs</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//input</span></span><br><span class="line"><span class="type">int</span> n, m, sex[<span class="number">1010</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">photo</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line"><span class="type">int</span> k;  cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">string s;  cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;0&quot;</span>)s=<span class="string">&quot;1000&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;-0&quot;</span>)s=<span class="string">&quot;-1000&quot;</span>;</span><br><span class="line"><span class="type">int</span> tmp = <span class="built_in">stoi</span>(s);</span><br><span class="line">photo[i].<span class="built_in">push_back</span>(tmp);</span><br><span class="line">sex[<span class="built_in">abs</span>(tmp)] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cp[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)&#123;</span><br><span class="line">string s;  cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;0&quot;</span>)s=<span class="string">&quot;1000&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;-0&quot;</span>)s=<span class="string">&quot;-1000&quot;</span>;</span><br><span class="line">cp[i] = <span class="built_in">stoi</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Search Photo</span></span><br><span class="line"><span class="type">double</span> love[<span class="number">1010</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">2</span>; c++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line"><span class="comment">//Find CP</span></span><br><span class="line"><span class="type">int</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; photo[i].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(photo[i][j]==cp[c])&#123;</span><br><span class="line">ok = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Add Love</span></span><br><span class="line"><span class="keyword">if</span>(ok)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; photo[i].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cp[c]*photo[i][j]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">love[<span class="built_in">abs</span>(photo[i][j])] += <span class="number">1.0</span>/photo[i].<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Count maxlove</span></span><br><span class="line"><span class="type">double</span> maxx[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt;<span class="built_in">ans</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">2</span>; c++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cp[c]*sex[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(love[i]&gt;maxx[c])&#123;</span><br><span class="line">maxx[c] = love[i];</span><br><span class="line">ans[c].<span class="built_in">clear</span>();</span><br><span class="line">ans[c].<span class="built_in">push_back</span>(sex[i]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(love[i]==maxx[c])&#123;</span><br><span class="line">ans[c].<span class="built_in">push_back</span>(sex[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans[1].size()&lt;&lt;&quot; &quot;&lt;&lt;ans[2].size()&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="keyword">if</span>(maxx[<span class="number">1</span>]==love[<span class="built_in">abs</span>(cp[<span class="number">2</span>])] &amp;&amp; maxx[<span class="number">2</span>]==love[<span class="built_in">abs</span>(cp[<span class="number">1</span>])])&#123;</span><br><span class="line">string s1 = <span class="built_in">to_string</span>(cp[<span class="number">1</span>]), s2 = <span class="built_in">to_string</span>(cp[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">if</span>(cp[<span class="number">1</span>]==<span class="number">1000</span>)s1=<span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(cp[<span class="number">1</span>]==<span class="number">-1000</span>)s1=<span class="string">&quot;-0&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(cp[<span class="number">2</span>]==<span class="number">1000</span>)s2=<span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(cp[<span class="number">2</span>]==<span class="number">-1000</span>)s2=<span class="string">&quot;-0&quot;</span>;</span><br><span class="line">cout&lt;&lt;s1&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">2</span>; c++)&#123;</span><br><span class="line"><span class="built_in">sort</span>(ans[c].<span class="built_in">begin</span>(), ans[c].<span class="built_in">end</span>(),cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans[c].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">string s1 = <span class="built_in">to_string</span>(cp[c]), s2 = <span class="built_in">to_string</span>(ans[c][i]);</span><br><span class="line"><span class="keyword">if</span>(cp[c]==<span class="number">1000</span>)s1 = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(cp[c]==<span class="number">-1000</span>)s1 = <span class="string">&quot;-0&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(ans[c][i]==<span class="number">1000</span>)s2 = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(ans[c][i]==<span class="number">-1000</span>)s2 = <span class="string">&quot;-0&quot;</span>;</span><br><span class="line">cout&lt;&lt;s1&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="L2-029-特立独行的幸福"><a href="#L2-029-特立独行的幸福" class="headerlink" title="L2-029    特立独行的幸福"></a>L2-029    特立独行的幸福</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">bool</span> vis2[N]=&#123;<span class="literal">false</span>&#125;;<span class="comment">//设置两个vis数组</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(x);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ans+=((x%<span class="number">10</span>)*(x%<span class="number">10</span>));</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=x;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="type">int</span> pre;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        pre=s.<span class="built_in">size</span>();</span><br><span class="line">        s.<span class="built_in">insert</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()==pre) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        x=<span class="built_in">f</span>(x);</span><br><span class="line">        v[t].<span class="built_in">push_back</span>(x);</span><br><span class="line">        vis[x]=<span class="literal">true</span>; <span class="comment">//被求出来的一定是不独立的，标记</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">        vis2[i]=<span class="built_in">judge</span>(i); <span class="comment">//先全判断一边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]&amp;&amp;vis2[i])&#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> len=v[i].<span class="built_in">size</span>();</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;(<span class="built_in">isprime</span>(i)?len*<span class="number">2</span>:len)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) cout&lt;&lt;<span class="string">&quot;SAD&quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-030-冰岛人"><a href="#L2-030-冰岛人" class="headerlink" title="L2-030    冰岛人"></a>L2-030    冰岛人</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">people</span>&#123;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    string father;</span><br><span class="line">&#125;;</span><br><span class="line">unordered_map&lt;string,people&gt; p;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">judge</span><span class="params">(string a,string b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j;</span><br><span class="line">    <span class="keyword">for</span>(string A=a;!A.<span class="built_in">empty</span>();A=p[A].father,i++)&#123;</span><br><span class="line">        j=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(string B=b;!B.<span class="built_in">empty</span>();B=p[B].father,j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">5</span>&amp;&amp;j&gt;=<span class="number">5</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(A==B&amp;&amp;(i&lt;<span class="number">5</span>||j&lt;<span class="number">5</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    string str,a,b;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="comment">// 先名后姓</span></span><br><span class="line">        <span class="comment">// male 男 female 女</span></span><br><span class="line">        <span class="keyword">if</span>(b.<span class="built_in">back</span>()==<span class="string">&#x27;n&#x27;</span>) p[a]=&#123;<span class="string">&#x27;m&#x27;</span>,b.<span class="built_in">substr</span>(<span class="number">0</span>,b.<span class="built_in">size</span>()<span class="number">-4</span>)&#125;;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b.<span class="built_in">back</span>()==<span class="string">&#x27;r&#x27;</span>) p[a]=&#123;<span class="string">&#x27;f&#x27;</span>,b.<span class="built_in">substr</span>(<span class="number">0</span>,b.<span class="built_in">size</span>()<span class="number">-7</span>)&#125;; <span class="comment">// b.size() b.length not sizeof(b)</span></span><br><span class="line">        <span class="keyword">else</span> p[a].sex=b.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;str&gt;&gt;b&gt;&gt;str; <span class="comment">// 姓没用</span></span><br><span class="line">        <span class="keyword">if</span>(p.<span class="built_in">find</span>(a)==p.<span class="built_in">end</span>()||p.<span class="built_in">find</span>(b)==p.<span class="built_in">end</span>()) cout&lt;&lt;<span class="string">&quot;NA\n&quot;</span>; <span class="comment">//find 约等于map自带</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p[a].sex==p[b].sex) cout&lt;&lt;<span class="string">&quot;Whatever\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;(<span class="built_in">judge</span>(a,b)?<span class="string">&quot;Yes\n&quot;</span>:<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// cin &gt;&gt; m;</span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; m; i++) &#123;</span></span><br><span class="line"><span class="comment">// cin &gt;&gt; a &gt;&gt; str &gt;&gt; b &gt;&gt; str;  //姓氏没有用</span></span><br><span class="line"><span class="comment">// if (people.find(a) == people.end() || people.find(b) == people.end())printf(&quot;NA\n&quot;);</span></span><br><span class="line"><span class="comment">// else if (people[a].sex == people[b].sex)printf(&quot;Whatever\n&quot;);</span></span><br><span class="line"><span class="comment">// elseprintf(&quot;%s\n&quot;, judge(a, b) ? &quot;Yes&quot; : &quot;No&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="L2-031-深入虎穴"><a href="#L2-031-深入虎穴" class="headerlink" title="L2-031    深入虎穴"></a>L2-031    深入虎穴</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 很直白的搜索 dfs bfs差不多 记忆化搜索。。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="comment">// vector&lt;int&gt; v[N];</span></span><br><span class="line"><span class="comment">// 貌似一个pre数组就可以 对每个节点遍历深度</span></span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="comment">// 先找入口 用pre的话,入口都不用找</span></span><br><span class="line"><span class="type">int</span> height[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">geth</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(height[s]==<span class="number">0</span>) height[s]=<span class="built_in">geth</span>(pre[s])+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> height[s];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">memset</span>(pre,<span class="number">-1</span>,<span class="built_in">sizeof</span>(pre));</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> k,t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;k;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            cin&gt;&gt;t;</span><br><span class="line">            pre[t]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">-1</span>,MAX=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">geth</span>(i)&gt;MAX)&#123;</span><br><span class="line">            MAX=<span class="built_in">geth</span>(i);</span><br><span class="line">            u=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;u;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-032-彩虹瓶"><a href="#L2-032-彩虹瓶" class="headerlink" title="L2-032    彩虹瓶"></a>L2-032    彩虹瓶</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初看栈使用 数据比较弱</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; s; <span class="comment">//stack没有clear 直接重新定义</span></span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">        <span class="type">int</span> t1=<span class="number">1</span>,t2;</span><br><span class="line">        <span class="type">int</span> cnt1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            t2=a[i];</span><br><span class="line">            <span class="keyword">if</span>(t2==t1)&#123;</span><br><span class="line">                t1++;</span><br><span class="line">                <span class="keyword">while</span>(!s.<span class="built_in">empty</span>()&amp;&amp;s.<span class="built_in">top</span>()==t1)&#123;</span><br><span class="line">                    s.<span class="built_in">pop</span>();</span><br><span class="line">                    t1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                s.<span class="built_in">push</span>(t2);</span><br><span class="line">                <span class="keyword">if</span>(s.<span class="built_in">size</span>()&gt;m)&#123; <span class="comment">// 把=改成&gt;就过了 下面写的都是对的</span></span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// int t3=-1;</span></span><br><span class="line">            <span class="comment">// if(!s.empty()) t3=s.top();</span></span><br><span class="line">            <span class="comment">// while(t3==t1)&#123;</span></span><br><span class="line">            <span class="comment">//     t1++;</span></span><br><span class="line">            <span class="comment">//     s.pop(); // pop之后size要-1</span></span><br><span class="line">            <span class="comment">//     cnt1--;</span></span><br><span class="line">            <span class="comment">//     if(s.empty()) break;</span></span><br><span class="line">            <span class="comment">//     t3=s.top();</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123; cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(t1==n+<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-033-简单计算器"><a href="#L2-033-简单计算器" class="headerlink" title="L2-033    简单计算器"></a>L2-033    简单计算器</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈基础</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt; s2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> t1,d1,d2;</span><br><span class="line">    <span class="type">char</span> t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1;</span><br><span class="line">        s1.<span class="built_in">push</span>(t1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t2;</span><br><span class="line">        s2.<span class="built_in">push</span>(t2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        d1=s1.<span class="built_in">top</span>();</span><br><span class="line">        s1.<span class="built_in">pop</span>();</span><br><span class="line">        d2=s1.<span class="built_in">top</span>();</span><br><span class="line">        s1.<span class="built_in">pop</span>();</span><br><span class="line">        t2=s2.<span class="built_in">top</span>();</span><br><span class="line">        s2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(t2==<span class="string">&#x27;+&#x27;</span>) s1.<span class="built_in">push</span>(d1+d2);</span><br><span class="line">        <span class="keyword">if</span>(t2==<span class="string">&#x27;-&#x27;</span>) s1.<span class="built_in">push</span>(d2-d1);</span><br><span class="line">        <span class="keyword">if</span>(t2==<span class="string">&#x27;*&#x27;</span>) s1.<span class="built_in">push</span>(d1*d2);</span><br><span class="line">        <span class="keyword">if</span>(t2==<span class="string">&#x27;/&#x27;</span>) &#123;<span class="keyword">if</span>(d1==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;ERROR: %d/0&quot;</span>,d2); <span class="keyword">return</span> <span class="number">0</span>;&#125; s1.<span class="built_in">push</span>(d2/d1); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s1.<span class="built_in">top</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-034-口罩发放"><a href="#L2-034-口罩发放" class="headerlink" title="L2-034    口罩发放"></a>L2-034    口罩发放</h3><h3 id="L2-035-完全二叉树的层序遍历"><a href="#L2-035-完全二叉树的层序遍历" class="headerlink" title="L2-035    完全二叉树的层序遍历"></a>L2-035    完全二叉树的层序遍历</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//完全二叉树直接数组存</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tree[<span class="number">40</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creat</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root&gt;n) <span class="keyword">return</span>; <span class="comment">//注意递归结束条件</span></span><br><span class="line">    <span class="built_in">creat</span>(root*<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">creat</span>(root*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    cin&gt;&gt;tree[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">creat</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;tree[i];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n) cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-036-网红点打卡攻略"><a href="#L2-036-网红点打卡攻略" class="headerlink" title="L2-036    网红点打卡攻略"></a>L2-036    网红点打卡攻略</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> cost[N][N],r[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> t1,t2,t3;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1&gt;&gt;t2&gt;&gt;t3;</span><br><span class="line">        cost[t1][t2]=cost[t2][t1]=t3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="type">int</span> MIN=<span class="number">0x3fffffff</span>,u=<span class="number">-1</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;t1;</span><br><span class="line">        <span class="built_in">memset</span>(r,<span class="number">-1</span>,<span class="built_in">sizeof</span>(r));</span><br><span class="line">        r[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=t1;j++)&#123;</span><br><span class="line">            cin&gt;&gt;r[j]; <span class="comment">//标错下标了</span></span><br><span class="line">        &#125;</span><br><span class="line">        r[t1+<span class="number">1</span>]=<span class="number">0</span>; <span class="comment">//这里设置了结束后面就不用判断了</span></span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=t1;j++)&#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;r[j]&lt;&lt;&#x27; &#x27;&lt;&lt;r[j+1]&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(cost[r[j]][r[j+<span class="number">1</span>]]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// cout&lt;&lt;cost[r[j]][r[j+1]]&lt;&lt;endl;</span></span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;cost[r[j]][r[j+1]]&lt;&lt;endl;</span></span><br><span class="line">            ans+=cost[r[j]][r[j+<span class="number">1</span>]];</span><br><span class="line">            <span class="type">int</span> pre=s.<span class="built_in">size</span>();</span><br><span class="line">            s.<span class="built_in">insert</span>(r[j]);</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">size</span>()==pre)&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag||s.<span class="built_in">size</span>()!=n+<span class="number">1</span>||cost[r[t1]][<span class="number">0</span>]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;MIN)&#123;</span><br><span class="line">            MIN=ans;</span><br><span class="line">            u=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;<span class="string">&#x27;\n&#x27;</span>&lt;&lt;u&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;MIN;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-037-包装机"><a href="#L2-037-包装机" class="headerlink" title="L2-037    包装机"></a>L2-037    包装机</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈、队列</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q[<span class="number">110</span>];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        mp[i+<span class="string">&#x27;A&#x27;</span>]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,s;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;str;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;mp[str[j]]&lt;&lt;endl;</span></span><br><span class="line">            q[i].<span class="built_in">push</span>(mp[str[j]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t,t1,t2;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;t)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st.<span class="built_in">empty</span>()) <span class="comment">// 记得判空即可</span></span><br><span class="line">            &#123;</span><br><span class="line">                t2=st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                v.<span class="built_in">push_back</span>(t2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!q[t].<span class="built_in">empty</span>())&#123; <span class="comment">// 判空</span></span><br><span class="line">                t1=q[t].<span class="built_in">front</span>();</span><br><span class="line">                q[t].<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">size</span>()==s)&#123;</span><br><span class="line">                    t2=st.<span class="built_in">top</span>();</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                    v.<span class="built_in">push_back</span>(t2);</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">push</span>(t1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">char</span>(v[i]+<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-038-病毒溯源"><a href="#L2-038-病毒溯源" class="headerlink" title="L2-038    病毒溯源"></a>L2-038    病毒溯源</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个pre数组的事 记忆化搜索</span></span><br><span class="line"><span class="comment">// vector 重载 &lt; 直接用</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="type">int</span> height[N];</span><br><span class="line"><span class="type">int</span> u=<span class="number">-1</span>,MAX=<span class="number">-1</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">geth</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(height[s]==<span class="number">0</span>) height[s]=<span class="built_in">geth</span>(pre[s])+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> height[s];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,vector&lt;<span class="type">int</span>&gt;&amp; _v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(pre[s],_v);</span><br><span class="line">    _v.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,t1,t2;</span><br><span class="line">    <span class="built_in">memset</span>(pre,<span class="number">-1</span>,<span class="built_in">sizeof</span>(pre));</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;t1;j++)&#123;</span><br><span class="line">            cin&gt;&gt;t2;</span><br><span class="line">            pre[t2]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">geth</span>(i)&gt;MAX)&#123;</span><br><span class="line">            MAX=<span class="built_in">geth</span>(i);</span><br><span class="line">            vv.<span class="built_in">clear</span>();</span><br><span class="line">            vv.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">geth</span>(i)==MAX)&#123;</span><br><span class="line">            vv.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;MAX&lt;&lt;endl;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;vv.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">        <span class="built_in">dfs</span>(vv[i],v);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v=ans[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ans[<span class="number">0</span>].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;ans[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;ans[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>) cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-039-清点代码库"><a href="#L2-039-清点代码库" class="headerlink" title="L2-039    清点代码库"></a>L2-039    清点代码库</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map vector</span></span><br><span class="line"><span class="comment">// map pair类型变量 类似结构体</span></span><br><span class="line"><span class="comment">// 用结构题存map 重载&lt;排序 vector自带&lt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;vector&lt;<span class="type">int</span>&gt;,<span class="type">int</span>&gt; mp; <span class="comment">// 只能用来统计数量，不能重载运算符</span></span><br><span class="line"><span class="comment">// 重新用node来保存</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.cnt==y.cnt) <span class="keyword">return</span> x.v&lt;y.v;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x.cnt&gt;y.cnt;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;node&gt; ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,t;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        v.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            cin&gt;&gt;t;</span><br><span class="line">            v.<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        mp[v]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:mp)&#123;</span><br><span class="line">        node tn;</span><br><span class="line">        tn.v=i.first;</span><br><span class="line">        tn.cnt=i.second;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(tn);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ans.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;ans[i].cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ans[i].v[j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L2-040-哲哲打游戏"><a href="#L2-040-哲哲打游戏" class="headerlink" title="L2-040    哲哲打游戏"></a>L2-040    哲哲打游戏</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单模拟</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line"><span class="type">int</span> ad[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,k,t;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            cin&gt;&gt;t;</span><br><span class="line">            v[i].<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> p,q;</span><br><span class="line">    <span class="type">int</span> now=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">        cin&gt;&gt;p&gt;&gt;q;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="number">0</span>)&#123;</span><br><span class="line">            now=v[now][q<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="number">1</span>)&#123;</span><br><span class="line">            ad[q]=now;</span><br><span class="line">            cout&lt;&lt;now&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="number">2</span>)&#123;</span><br><span class="line">            now=ad[q];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==m<span class="number">-1</span>) cout&lt;&lt;now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L3-001-凑零钱"><a href="#L3-001-凑零钱" class="headerlink" title="L3-001    凑零钱"></a>L3-001    凑零钱</h3><h3 id="L3-002-特殊堆栈"><a href="#L3-002-特殊堆栈" class="headerlink" title="L3-002    特殊堆栈"></a>L3-002    特殊堆栈</h3><h3 id="L3-003-社交集群"><a href="#L3-003-社交集群" class="headerlink" title="L3-003    社交集群"></a>L3-003    社交集群</h3><h3 id="L3-004-肿瘤诊断"><a href="#L3-004-肿瘤诊断" class="headerlink" title="L3-004    肿瘤诊断"></a>L3-004    肿瘤诊断</h3><h3 id="L3-005-垃圾箱分布"><a href="#L3-005-垃圾箱分布" class="headerlink" title="L3-005    垃圾箱分布"></a>L3-005    垃圾箱分布</h3><h3 id="L3-006-迎风一刀斩"><a href="#L3-006-迎风一刀斩" class="headerlink" title="L3-006    迎风一刀斩"></a>L3-006    迎风一刀斩</h3><h3 id="L3-007-天梯地图"><a href="#L3-007-天梯地图" class="headerlink" title="L3-007    天梯地图"></a>L3-007    天梯地图</h3><h3 id="L3-008-喊山"><a href="#L3-008-喊山" class="headerlink" title="L3-008    喊山"></a>L3-008    喊山</h3><h3 id="L3-009-长城"><a href="#L3-009-长城" class="headerlink" title="L3-009    长城"></a>L3-009    长城</h3><h3 id="L3-010-是否完全二叉搜索树"><a href="#L3-010-是否完全二叉搜索树" class="headerlink" title="L3-010    是否完全二叉搜索树"></a>L3-010    是否完全二叉搜索树</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BST建立并判断完全二叉树</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> maxn=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> nid; <span class="comment">//用nid来模拟数组存数的下标</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    node *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(node* &amp;root,<span class="type">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        root=<span class="keyword">new</span> node;</span><br><span class="line">        root-&gt;data=data;</span><br><span class="line">        root-&gt;left=root-&gt;right=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 记得return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(data&gt;root-&gt;data) <span class="built_in">insert</span>(root-&gt;left,data);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">insert</span>(root-&gt;right,data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(node* root)</span></span>&#123;</span><br><span class="line">    queue&lt;node*&gt; q;</span><br><span class="line">    root-&gt;nid=<span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node *now=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout&lt;&lt;now-&gt;data;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;n) cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;left!=<span class="literal">nullptr</span>)&#123; </span><br><span class="line">            q.<span class="built_in">push</span>(now-&gt;left);</span><br><span class="line">            now-&gt;left-&gt;nid=now-&gt;nid*<span class="number">2</span>; <span class="comment">//nid*2</span></span><br><span class="line">            maxn=<span class="built_in">max</span>(now-&gt;left-&gt;nid,maxn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;right!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(now-&gt;right);</span><br><span class="line">            now-&gt;right-&gt;nid=now-&gt;nid*<span class="number">2</span>+<span class="number">1</span>; <span class="comment">//nid*2+1</span></span><br><span class="line">            maxn=<span class="built_in">max</span>(now-&gt;right-&gt;nid,maxn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写到这，不会判断是不是完全二叉树了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    node *root=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        <span class="built_in">insert</span>(root,t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>(root);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(maxn==n) cout&lt;&lt;<span class="string">&quot;YES&quot;</span>; <span class="comment">//用完全二叉树性质判断 最大节点id和个数一样</span></span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L3-011-直捣黄龙"><a href="#L3-011-直捣黄龙" class="headerlink" title="L3-011    直捣黄龙"></a>L3-011    直捣黄龙</h3><h3 id="L3-012-水果忍者"><a href="#L3-012-水果忍者" class="headerlink" title="L3-012    水果忍者"></a>L3-012    水果忍者</h3><h3 id="L3-013-非常弹的球"><a href="#L3-013-非常弹的球" class="headerlink" title="L3-013    非常弹的球"></a>L3-013    非常弹的球</h3><h3 id="L3-014-周游世界"><a href="#L3-014-周游世界" class="headerlink" title="L3-014    周游世界"></a>L3-014    周游世界</h3><h3 id="L3-015-球队“食物链”"><a href="#L3-015-球队“食物链”" class="headerlink" title="L3-015    球队“食物链”"></a>L3-015    球队“食物链”</h3><h3 id="L3-016-二叉搜索树的结构"><a href="#L3-016-二叉搜索树的结构" class="headerlink" title="L3-016    二叉搜索树的结构"></a>L3-016    二叉搜索树的结构</h3><h3 id="L3-017-森森快递"><a href="#L3-017-森森快递" class="headerlink" title="L3-017    森森快递"></a>L3-017    森森快递</h3><h3 id="L3-018-森森美图"><a href="#L3-018-森森美图" class="headerlink" title="L3-018    森森美图"></a>L3-018    森森美图</h3><h3 id="L3-019-代码排版"><a href="#L3-019-代码排版" class="headerlink" title="L3-019    代码排版"></a>L3-019    代码排版</h3><h3 id="L3-020-至多删三个字符"><a href="#L3-020-至多删三个字符" class="headerlink" title="L3-020    至多删三个字符"></a>L3-020    至多删三个字符</h3><h3 id="L3-021-神坛"><a href="#L3-021-神坛" class="headerlink" title="L3-021    神坛"></a>L3-021    神坛</h3><h3 id="L3-022-地铁一日游"><a href="#L3-022-地铁一日游" class="headerlink" title="L3-022    地铁一日游"></a>L3-022    地铁一日游</h3><h3 id="L3-023-计算图"><a href="#L3-023-计算图" class="headerlink" title="L3-023    计算图"></a>L3-023    计算图</h3><h3 id="L3-024-Oriol和David"><a href="#L3-024-Oriol和David" class="headerlink" title="L3-024    Oriol和David"></a>L3-024    Oriol和David</h3><h3 id="L3-025-那就别担心了"><a href="#L3-025-那就别担心了" class="headerlink" title="L3-025    那就别担心了"></a>L3-025    那就别担心了</h3><h3 id="L3-026-传送门"><a href="#L3-026-传送门" class="headerlink" title="L3-026    传送门"></a>L3-026    传送门</h3><h3 id="L3-027-可怜的复杂"><a href="#L3-027-可怜的复杂" class="headerlink" title="L3-027    可怜的复杂"></a>L3-027    可怜的复杂</h3><h3 id="L3-028-森森旅游"><a href="#L3-028-森森旅游" class="headerlink" title="L3-028    森森旅游"></a>L3-028    森森旅游</h3><h3 id="L3-029-还原文件"><a href="#L3-029-还原文件" class="headerlink" title="L3-029    还原文件"></a>L3-029    还原文件</h3><h3 id="L3-030-可怜的简单题"><a href="#L3-030-可怜的简单题" class="headerlink" title="L3-030    可怜的简单题"></a>L3-030    可怜的简单题</h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>置顶必看</title>
      <link href="/posts/30065/"/>
      <url>/posts/30065/</url>
      
        <content type="html"><![CDATA[<h1 id="原博客链接：https-blog-haorical-top"><a href="#原博客链接：https-blog-haorical-top" class="headerlink" title="原博客链接：https://blog.haorical.top"></a>原博客链接：<a href="https://blog.haorical.top/">https://blog.haorical.top</a></h1><p>误删了之前的所有文章，没完全恢复，导致原来的博客不能push了</p><p>还好github可以回滚到之前的最后一个版本，文章都还在，搜索也能用</p><p>重新搭了一个，顺便换了个主题，以后就在这写了</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
